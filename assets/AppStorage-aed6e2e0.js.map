{"version":3,"file":"AppStorage-aed6e2e0.js","sources":["../../node_modules/@firebase/storage/dist/index.esm2017.js","../../src/firebase/AppStorage.ts"],"sourcesContent":["import { _getProvider, getApp, _registerComponent, registerVersion, SDK_VERSION } from '@firebase/app';\nimport { FirebaseError, isNode, createMockUserToken, getModularInstance, getDefaultEmulatorHostnameAndPort } from '@firebase/util';\nimport { Component } from '@firebase/component';\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @fileoverview Constants used in the Firebase Storage library.\r\n */\r\n/**\r\n * Domain name for firebase storage.\r\n */\r\nconst DEFAULT_HOST = 'firebasestorage.googleapis.com';\r\n/**\r\n * The key in Firebase config json for the storage bucket.\r\n */\r\nconst CONFIG_STORAGE_BUCKET_KEY = 'storageBucket';\r\n/**\r\n * 2 minutes\r\n *\r\n * The timeout for all operations except upload.\r\n */\r\nconst DEFAULT_MAX_OPERATION_RETRY_TIME = 2 * 60 * 1000;\r\n/**\r\n * 10 minutes\r\n *\r\n * The timeout for upload.\r\n */\r\nconst DEFAULT_MAX_UPLOAD_RETRY_TIME = 10 * 60 * 1000;\r\n/**\r\n * 1 second\r\n */\r\nconst DEFAULT_MIN_SLEEP_TIME_MILLIS = 1000;\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An error returned by the Firebase Storage SDK.\r\n * @public\r\n */\r\nclass StorageError extends FirebaseError {\r\n    /**\r\n     * @param code - A `StorageErrorCode` string to be prefixed with 'storage/' and\r\n     *  added to the end of the message.\r\n     * @param message  - Error message.\r\n     * @param status_ - Corresponding HTTP Status Code\r\n     */\r\n    constructor(code, message, status_ = 0) {\r\n        super(prependCode(code), `Firebase Storage: ${message} (${prependCode(code)})`);\r\n        this.status_ = status_;\r\n        /**\r\n         * Stores custom error data unique to the `StorageError`.\r\n         */\r\n        this.customData = { serverResponse: null };\r\n        this._baseMessage = this.message;\r\n        // Without this, `instanceof StorageError`, in tests for example,\r\n        // returns false.\r\n        Object.setPrototypeOf(this, StorageError.prototype);\r\n    }\r\n    get status() {\r\n        return this.status_;\r\n    }\r\n    set status(status) {\r\n        this.status_ = status;\r\n    }\r\n    /**\r\n     * Compares a `StorageErrorCode` against this error's code, filtering out the prefix.\r\n     */\r\n    _codeEquals(code) {\r\n        return prependCode(code) === this.code;\r\n    }\r\n    /**\r\n     * Optional response message that was added by the server.\r\n     */\r\n    get serverResponse() {\r\n        return this.customData.serverResponse;\r\n    }\r\n    set serverResponse(serverResponse) {\r\n        this.customData.serverResponse = serverResponse;\r\n        if (this.customData.serverResponse) {\r\n            this.message = `${this._baseMessage}\\n${this.customData.serverResponse}`;\r\n        }\r\n        else {\r\n            this.message = this._baseMessage;\r\n        }\r\n    }\r\n}\r\n/**\r\n * @public\r\n * Error codes that can be attached to `StorageError` objects.\r\n */\r\nvar StorageErrorCode;\r\n(function (StorageErrorCode) {\r\n    // Shared between all platforms\r\n    StorageErrorCode[\"UNKNOWN\"] = \"unknown\";\r\n    StorageErrorCode[\"OBJECT_NOT_FOUND\"] = \"object-not-found\";\r\n    StorageErrorCode[\"BUCKET_NOT_FOUND\"] = \"bucket-not-found\";\r\n    StorageErrorCode[\"PROJECT_NOT_FOUND\"] = \"project-not-found\";\r\n    StorageErrorCode[\"QUOTA_EXCEEDED\"] = \"quota-exceeded\";\r\n    StorageErrorCode[\"UNAUTHENTICATED\"] = \"unauthenticated\";\r\n    StorageErrorCode[\"UNAUTHORIZED\"] = \"unauthorized\";\r\n    StorageErrorCode[\"UNAUTHORIZED_APP\"] = \"unauthorized-app\";\r\n    StorageErrorCode[\"RETRY_LIMIT_EXCEEDED\"] = \"retry-limit-exceeded\";\r\n    StorageErrorCode[\"INVALID_CHECKSUM\"] = \"invalid-checksum\";\r\n    StorageErrorCode[\"CANCELED\"] = \"canceled\";\r\n    // JS specific\r\n    StorageErrorCode[\"INVALID_EVENT_NAME\"] = \"invalid-event-name\";\r\n    StorageErrorCode[\"INVALID_URL\"] = \"invalid-url\";\r\n    StorageErrorCode[\"INVALID_DEFAULT_BUCKET\"] = \"invalid-default-bucket\";\r\n    StorageErrorCode[\"NO_DEFAULT_BUCKET\"] = \"no-default-bucket\";\r\n    StorageErrorCode[\"CANNOT_SLICE_BLOB\"] = \"cannot-slice-blob\";\r\n    StorageErrorCode[\"SERVER_FILE_WRONG_SIZE\"] = \"server-file-wrong-size\";\r\n    StorageErrorCode[\"NO_DOWNLOAD_URL\"] = \"no-download-url\";\r\n    StorageErrorCode[\"INVALID_ARGUMENT\"] = \"invalid-argument\";\r\n    StorageErrorCode[\"INVALID_ARGUMENT_COUNT\"] = \"invalid-argument-count\";\r\n    StorageErrorCode[\"APP_DELETED\"] = \"app-deleted\";\r\n    StorageErrorCode[\"INVALID_ROOT_OPERATION\"] = \"invalid-root-operation\";\r\n    StorageErrorCode[\"INVALID_FORMAT\"] = \"invalid-format\";\r\n    StorageErrorCode[\"INTERNAL_ERROR\"] = \"internal-error\";\r\n    StorageErrorCode[\"UNSUPPORTED_ENVIRONMENT\"] = \"unsupported-environment\";\r\n})(StorageErrorCode || (StorageErrorCode = {}));\r\nfunction prependCode(code) {\r\n    return 'storage/' + code;\r\n}\r\nfunction unknown() {\r\n    const message = 'An unknown error occurred, please check the error payload for ' +\r\n        'server response.';\r\n    return new StorageError(StorageErrorCode.UNKNOWN, message);\r\n}\r\nfunction objectNotFound(path) {\r\n    return new StorageError(StorageErrorCode.OBJECT_NOT_FOUND, \"Object '\" + path + \"' does not exist.\");\r\n}\r\nfunction quotaExceeded(bucket) {\r\n    return new StorageError(StorageErrorCode.QUOTA_EXCEEDED, \"Quota for bucket '\" +\r\n        bucket +\r\n        \"' exceeded, please view quota on \" +\r\n        'https://firebase.google.com/pricing/.');\r\n}\r\nfunction unauthenticated() {\r\n    const message = 'User is not authenticated, please authenticate using Firebase ' +\r\n        'Authentication and try again.';\r\n    return new StorageError(StorageErrorCode.UNAUTHENTICATED, message);\r\n}\r\nfunction unauthorizedApp() {\r\n    return new StorageError(StorageErrorCode.UNAUTHORIZED_APP, 'This app does not have permission to access Firebase Storage on this project.');\r\n}\r\nfunction unauthorized(path) {\r\n    return new StorageError(StorageErrorCode.UNAUTHORIZED, \"User does not have permission to access '\" + path + \"'.\");\r\n}\r\nfunction retryLimitExceeded() {\r\n    return new StorageError(StorageErrorCode.RETRY_LIMIT_EXCEEDED, 'Max retry time for operation exceeded, please try again.');\r\n}\r\nfunction canceled() {\r\n    return new StorageError(StorageErrorCode.CANCELED, 'User canceled the upload/download.');\r\n}\r\nfunction invalidUrl(url) {\r\n    return new StorageError(StorageErrorCode.INVALID_URL, \"Invalid URL '\" + url + \"'.\");\r\n}\r\nfunction invalidDefaultBucket(bucket) {\r\n    return new StorageError(StorageErrorCode.INVALID_DEFAULT_BUCKET, \"Invalid default bucket '\" + bucket + \"'.\");\r\n}\r\nfunction noDefaultBucket() {\r\n    return new StorageError(StorageErrorCode.NO_DEFAULT_BUCKET, 'No default bucket ' +\r\n        \"found. Did you set the '\" +\r\n        CONFIG_STORAGE_BUCKET_KEY +\r\n        \"' property when initializing the app?\");\r\n}\r\nfunction cannotSliceBlob() {\r\n    return new StorageError(StorageErrorCode.CANNOT_SLICE_BLOB, 'Cannot slice blob for upload. Please retry the upload.');\r\n}\r\nfunction serverFileWrongSize() {\r\n    return new StorageError(StorageErrorCode.SERVER_FILE_WRONG_SIZE, 'Server recorded incorrect upload file size, please retry the upload.');\r\n}\r\nfunction noDownloadURL() {\r\n    return new StorageError(StorageErrorCode.NO_DOWNLOAD_URL, 'The given file does not have any download URLs.');\r\n}\r\nfunction missingPolyFill(polyFill) {\r\n    return new StorageError(StorageErrorCode.UNSUPPORTED_ENVIRONMENT, `${polyFill} is missing. Make sure to install the required polyfills. See https://firebase.google.com/docs/web/environments-js-sdk#polyfills for more information.`);\r\n}\r\n/**\r\n * @internal\r\n */\r\nfunction invalidArgument(message) {\r\n    return new StorageError(StorageErrorCode.INVALID_ARGUMENT, message);\r\n}\r\nfunction appDeleted() {\r\n    return new StorageError(StorageErrorCode.APP_DELETED, 'The Firebase app was deleted.');\r\n}\r\n/**\r\n * @param name - The name of the operation that was invalid.\r\n *\r\n * @internal\r\n */\r\nfunction invalidRootOperation(name) {\r\n    return new StorageError(StorageErrorCode.INVALID_ROOT_OPERATION, \"The operation '\" +\r\n        name +\r\n        \"' cannot be performed on a root reference, create a non-root \" +\r\n        \"reference using child, such as .child('file.png').\");\r\n}\r\n/**\r\n * @param format - The format that was not valid.\r\n * @param message - A message describing the format violation.\r\n */\r\nfunction invalidFormat(format, message) {\r\n    return new StorageError(StorageErrorCode.INVALID_FORMAT, \"String does not match format '\" + format + \"': \" + message);\r\n}\r\n/**\r\n * @param message - A message describing the internal error.\r\n */\r\nfunction internalError(message) {\r\n    throw new StorageError(StorageErrorCode.INTERNAL_ERROR, 'Internal error: ' + message);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Firebase Storage location data.\r\n *\r\n * @internal\r\n */\r\nclass Location {\r\n    constructor(bucket, path) {\r\n        this.bucket = bucket;\r\n        this.path_ = path;\r\n    }\r\n    get path() {\r\n        return this.path_;\r\n    }\r\n    get isRoot() {\r\n        return this.path.length === 0;\r\n    }\r\n    fullServerUrl() {\r\n        const encode = encodeURIComponent;\r\n        return '/b/' + encode(this.bucket) + '/o/' + encode(this.path);\r\n    }\r\n    bucketOnlyServerUrl() {\r\n        const encode = encodeURIComponent;\r\n        return '/b/' + encode(this.bucket) + '/o';\r\n    }\r\n    static makeFromBucketSpec(bucketString, host) {\r\n        let bucketLocation;\r\n        try {\r\n            bucketLocation = Location.makeFromUrl(bucketString, host);\r\n        }\r\n        catch (e) {\r\n            // Not valid URL, use as-is. This lets you put bare bucket names in\r\n            // config.\r\n            return new Location(bucketString, '');\r\n        }\r\n        if (bucketLocation.path === '') {\r\n            return bucketLocation;\r\n        }\r\n        else {\r\n            throw invalidDefaultBucket(bucketString);\r\n        }\r\n    }\r\n    static makeFromUrl(url, host) {\r\n        let location = null;\r\n        const bucketDomain = '([A-Za-z0-9.\\\\-_]+)';\r\n        function gsModify(loc) {\r\n            if (loc.path.charAt(loc.path.length - 1) === '/') {\r\n                loc.path_ = loc.path_.slice(0, -1);\r\n            }\r\n        }\r\n        const gsPath = '(/(.*))?$';\r\n        const gsRegex = new RegExp('^gs://' + bucketDomain + gsPath, 'i');\r\n        const gsIndices = { bucket: 1, path: 3 };\r\n        function httpModify(loc) {\r\n            loc.path_ = decodeURIComponent(loc.path);\r\n        }\r\n        const version = 'v[A-Za-z0-9_]+';\r\n        const firebaseStorageHost = host.replace(/[.]/g, '\\\\.');\r\n        const firebaseStoragePath = '(/([^?#]*).*)?$';\r\n        const firebaseStorageRegExp = new RegExp(`^https?://${firebaseStorageHost}/${version}/b/${bucketDomain}/o${firebaseStoragePath}`, 'i');\r\n        const firebaseStorageIndices = { bucket: 1, path: 3 };\r\n        const cloudStorageHost = host === DEFAULT_HOST\r\n            ? '(?:storage.googleapis.com|storage.cloud.google.com)'\r\n            : host;\r\n        const cloudStoragePath = '([^?#]*)';\r\n        const cloudStorageRegExp = new RegExp(`^https?://${cloudStorageHost}/${bucketDomain}/${cloudStoragePath}`, 'i');\r\n        const cloudStorageIndices = { bucket: 1, path: 2 };\r\n        const groups = [\r\n            { regex: gsRegex, indices: gsIndices, postModify: gsModify },\r\n            {\r\n                regex: firebaseStorageRegExp,\r\n                indices: firebaseStorageIndices,\r\n                postModify: httpModify\r\n            },\r\n            {\r\n                regex: cloudStorageRegExp,\r\n                indices: cloudStorageIndices,\r\n                postModify: httpModify\r\n            }\r\n        ];\r\n        for (let i = 0; i < groups.length; i++) {\r\n            const group = groups[i];\r\n            const captures = group.regex.exec(url);\r\n            if (captures) {\r\n                const bucketValue = captures[group.indices.bucket];\r\n                let pathValue = captures[group.indices.path];\r\n                if (!pathValue) {\r\n                    pathValue = '';\r\n                }\r\n                location = new Location(bucketValue, pathValue);\r\n                group.postModify(location);\r\n                break;\r\n            }\r\n        }\r\n        if (location == null) {\r\n            throw invalidUrl(url);\r\n        }\r\n        return location;\r\n    }\r\n}\n\n/**\r\n * A request whose promise always fails.\r\n */\r\nclass FailRequest {\r\n    constructor(error) {\r\n        this.promise_ = Promise.reject(error);\r\n    }\r\n    /** @inheritDoc */\r\n    getPromise() {\r\n        return this.promise_;\r\n    }\r\n    /** @inheritDoc */\r\n    cancel(_appDelete = false) { }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Accepts a callback for an action to perform (`doRequest`),\r\n * and then a callback for when the backoff has completed (`backoffCompleteCb`).\r\n * The callback sent to start requires an argument to call (`onRequestComplete`).\r\n * When `start` calls `doRequest`, it passes a callback for when the request has\r\n * completed, `onRequestComplete`. Based on this, the backoff continues, with\r\n * another call to `doRequest` and the above loop continues until the timeout\r\n * is hit, or a successful response occurs.\r\n * @description\r\n * @param doRequest Callback to perform request\r\n * @param backoffCompleteCb Callback to call when backoff has been completed\r\n */\r\nfunction start(doRequest, \r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nbackoffCompleteCb, timeout) {\r\n    // TODO(andysoto): make this code cleaner (probably refactor into an actual\r\n    // type instead of a bunch of functions with state shared in the closure)\r\n    let waitSeconds = 1;\r\n    // Would type this as \"number\" but that doesn't work for Node so ¯\\_(ツ)_/¯\r\n    // TODO: find a way to exclude Node type definition for storage because storage only works in browser\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    let retryTimeoutId = null;\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    let globalTimeoutId = null;\r\n    let hitTimeout = false;\r\n    let cancelState = 0;\r\n    function canceled() {\r\n        return cancelState === 2;\r\n    }\r\n    let triggeredCallback = false;\r\n    function triggerCallback(...args) {\r\n        if (!triggeredCallback) {\r\n            triggeredCallback = true;\r\n            backoffCompleteCb.apply(null, args);\r\n        }\r\n    }\r\n    function callWithDelay(millis) {\r\n        retryTimeoutId = setTimeout(() => {\r\n            retryTimeoutId = null;\r\n            doRequest(responseHandler, canceled());\r\n        }, millis);\r\n    }\r\n    function clearGlobalTimeout() {\r\n        if (globalTimeoutId) {\r\n            clearTimeout(globalTimeoutId);\r\n        }\r\n    }\r\n    function responseHandler(success, ...args) {\r\n        if (triggeredCallback) {\r\n            clearGlobalTimeout();\r\n            return;\r\n        }\r\n        if (success) {\r\n            clearGlobalTimeout();\r\n            triggerCallback.call(null, success, ...args);\r\n            return;\r\n        }\r\n        const mustStop = canceled() || hitTimeout;\r\n        if (mustStop) {\r\n            clearGlobalTimeout();\r\n            triggerCallback.call(null, success, ...args);\r\n            return;\r\n        }\r\n        if (waitSeconds < 64) {\r\n            /* TODO(andysoto): don't back off so quickly if we know we're offline. */\r\n            waitSeconds *= 2;\r\n        }\r\n        let waitMillis;\r\n        if (cancelState === 1) {\r\n            cancelState = 2;\r\n            waitMillis = 0;\r\n        }\r\n        else {\r\n            waitMillis = (waitSeconds + Math.random()) * 1000;\r\n        }\r\n        callWithDelay(waitMillis);\r\n    }\r\n    let stopped = false;\r\n    function stop(wasTimeout) {\r\n        if (stopped) {\r\n            return;\r\n        }\r\n        stopped = true;\r\n        clearGlobalTimeout();\r\n        if (triggeredCallback) {\r\n            return;\r\n        }\r\n        if (retryTimeoutId !== null) {\r\n            if (!wasTimeout) {\r\n                cancelState = 2;\r\n            }\r\n            clearTimeout(retryTimeoutId);\r\n            callWithDelay(0);\r\n        }\r\n        else {\r\n            if (!wasTimeout) {\r\n                cancelState = 1;\r\n            }\r\n        }\r\n    }\r\n    callWithDelay(0);\r\n    globalTimeoutId = setTimeout(() => {\r\n        hitTimeout = true;\r\n        stop(true);\r\n    }, timeout);\r\n    return stop;\r\n}\r\n/**\r\n * Stops the retry loop from repeating.\r\n * If the function is currently \"in between\" retries, it is invoked immediately\r\n * with the second parameter as \"true\". Otherwise, it will be invoked once more\r\n * after the current invocation finishes iff the current invocation would have\r\n * triggered another retry.\r\n */\r\nfunction stop(id) {\r\n    id(false);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction isJustDef(p) {\r\n    return p !== void 0;\r\n}\r\n// eslint-disable-next-line @typescript-eslint/ban-types\r\nfunction isFunction(p) {\r\n    return typeof p === 'function';\r\n}\r\nfunction isNonArrayObject(p) {\r\n    return typeof p === 'object' && !Array.isArray(p);\r\n}\r\nfunction isString(p) {\r\n    return typeof p === 'string' || p instanceof String;\r\n}\r\nfunction isNativeBlob(p) {\r\n    return isNativeBlobDefined() && p instanceof Blob;\r\n}\r\nfunction isNativeBlobDefined() {\r\n    // Note: The `isNode()` check can be removed when `node-fetch` adds native Blob support\r\n    // PR: https://github.com/node-fetch/node-fetch/pull/1664\r\n    return typeof Blob !== 'undefined' && !isNode();\r\n}\r\nfunction validateNumber(argument, minValue, maxValue, value) {\r\n    if (value < minValue) {\r\n        throw invalidArgument(`Invalid value for '${argument}'. Expected ${minValue} or greater.`);\r\n    }\r\n    if (value > maxValue) {\r\n        throw invalidArgument(`Invalid value for '${argument}'. Expected ${maxValue} or less.`);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction makeUrl(urlPart, host, protocol) {\r\n    let origin = host;\r\n    if (protocol == null) {\r\n        origin = `https://${host}`;\r\n    }\r\n    return `${protocol}://${origin}/v0${urlPart}`;\r\n}\r\nfunction makeQueryString(params) {\r\n    const encode = encodeURIComponent;\r\n    let queryPart = '?';\r\n    for (const key in params) {\r\n        if (params.hasOwnProperty(key)) {\r\n            const nextPart = encode(key) + '=' + encode(params[key]);\r\n            queryPart = queryPart + nextPart + '&';\r\n        }\r\n    }\r\n    // Chop off the extra '&' or '?' on the end\r\n    queryPart = queryPart.slice(0, -1);\r\n    return queryPart;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Error codes for requests made by the the XhrIo wrapper.\r\n */\r\nvar ErrorCode;\r\n(function (ErrorCode) {\r\n    ErrorCode[ErrorCode[\"NO_ERROR\"] = 0] = \"NO_ERROR\";\r\n    ErrorCode[ErrorCode[\"NETWORK_ERROR\"] = 1] = \"NETWORK_ERROR\";\r\n    ErrorCode[ErrorCode[\"ABORT\"] = 2] = \"ABORT\";\r\n})(ErrorCode || (ErrorCode = {}));\n\n/**\r\n * @license\r\n * Copyright 2022 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Checks the status code to see if the action should be retried.\r\n *\r\n * @param status Current HTTP status code returned by server.\r\n * @param additionalRetryCodes additional retry codes to check against\r\n */\r\nfunction isRetryStatusCode(status, additionalRetryCodes) {\r\n    // The codes for which to retry came from this page:\r\n    // https://cloud.google.com/storage/docs/exponential-backoff\r\n    const isFiveHundredCode = status >= 500 && status < 600;\r\n    const extraRetryCodes = [\r\n        // Request Timeout: web server didn't receive full request in time.\r\n        408,\r\n        // Too Many Requests: you're getting rate-limited, basically.\r\n        429\r\n    ];\r\n    const isExtraRetryCode = extraRetryCodes.indexOf(status) !== -1;\r\n    const isAdditionalRetryCode = additionalRetryCodes.indexOf(status) !== -1;\r\n    return isFiveHundredCode || isExtraRetryCode || isAdditionalRetryCode;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Handles network logic for all Storage Requests, including error reporting and\r\n * retries with backoff.\r\n *\r\n * @param I - the type of the backend's network response.\r\n * @param - O the output type used by the rest of the SDK. The conversion\r\n * happens in the specified `callback_`.\r\n */\r\nclass NetworkRequest {\r\n    constructor(url_, method_, headers_, body_, successCodes_, additionalRetryCodes_, callback_, errorCallback_, timeout_, progressCallback_, connectionFactory_, retry = true) {\r\n        this.url_ = url_;\r\n        this.method_ = method_;\r\n        this.headers_ = headers_;\r\n        this.body_ = body_;\r\n        this.successCodes_ = successCodes_;\r\n        this.additionalRetryCodes_ = additionalRetryCodes_;\r\n        this.callback_ = callback_;\r\n        this.errorCallback_ = errorCallback_;\r\n        this.timeout_ = timeout_;\r\n        this.progressCallback_ = progressCallback_;\r\n        this.connectionFactory_ = connectionFactory_;\r\n        this.retry = retry;\r\n        this.pendingConnection_ = null;\r\n        this.backoffId_ = null;\r\n        this.canceled_ = false;\r\n        this.appDelete_ = false;\r\n        this.promise_ = new Promise((resolve, reject) => {\r\n            this.resolve_ = resolve;\r\n            this.reject_ = reject;\r\n            this.start_();\r\n        });\r\n    }\r\n    /**\r\n     * Actually starts the retry loop.\r\n     */\r\n    start_() {\r\n        const doTheRequest = (backoffCallback, canceled) => {\r\n            if (canceled) {\r\n                backoffCallback(false, new RequestEndStatus(false, null, true));\r\n                return;\r\n            }\r\n            const connection = this.connectionFactory_();\r\n            this.pendingConnection_ = connection;\r\n            const progressListener = progressEvent => {\r\n                const loaded = progressEvent.loaded;\r\n                const total = progressEvent.lengthComputable ? progressEvent.total : -1;\r\n                if (this.progressCallback_ !== null) {\r\n                    this.progressCallback_(loaded, total);\r\n                }\r\n            };\r\n            if (this.progressCallback_ !== null) {\r\n                connection.addUploadProgressListener(progressListener);\r\n            }\r\n            // connection.send() never rejects, so we don't need to have a error handler or use catch on the returned promise.\r\n            // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n            connection\r\n                .send(this.url_, this.method_, this.body_, this.headers_)\r\n                .then(() => {\r\n                if (this.progressCallback_ !== null) {\r\n                    connection.removeUploadProgressListener(progressListener);\r\n                }\r\n                this.pendingConnection_ = null;\r\n                const hitServer = connection.getErrorCode() === ErrorCode.NO_ERROR;\r\n                const status = connection.getStatus();\r\n                if (!hitServer ||\r\n                    (isRetryStatusCode(status, this.additionalRetryCodes_) &&\r\n                        this.retry)) {\r\n                    const wasCanceled = connection.getErrorCode() === ErrorCode.ABORT;\r\n                    backoffCallback(false, new RequestEndStatus(false, null, wasCanceled));\r\n                    return;\r\n                }\r\n                const successCode = this.successCodes_.indexOf(status) !== -1;\r\n                backoffCallback(true, new RequestEndStatus(successCode, connection));\r\n            });\r\n        };\r\n        /**\r\n         * @param requestWentThrough - True if the request eventually went\r\n         *     through, false if it hit the retry limit or was canceled.\r\n         */\r\n        const backoffDone = (requestWentThrough, status) => {\r\n            const resolve = this.resolve_;\r\n            const reject = this.reject_;\r\n            const connection = status.connection;\r\n            if (status.wasSuccessCode) {\r\n                try {\r\n                    const result = this.callback_(connection, connection.getResponse());\r\n                    if (isJustDef(result)) {\r\n                        resolve(result);\r\n                    }\r\n                    else {\r\n                        resolve();\r\n                    }\r\n                }\r\n                catch (e) {\r\n                    reject(e);\r\n                }\r\n            }\r\n            else {\r\n                if (connection !== null) {\r\n                    const err = unknown();\r\n                    err.serverResponse = connection.getErrorText();\r\n                    if (this.errorCallback_) {\r\n                        reject(this.errorCallback_(connection, err));\r\n                    }\r\n                    else {\r\n                        reject(err);\r\n                    }\r\n                }\r\n                else {\r\n                    if (status.canceled) {\r\n                        const err = this.appDelete_ ? appDeleted() : canceled();\r\n                        reject(err);\r\n                    }\r\n                    else {\r\n                        const err = retryLimitExceeded();\r\n                        reject(err);\r\n                    }\r\n                }\r\n            }\r\n        };\r\n        if (this.canceled_) {\r\n            backoffDone(false, new RequestEndStatus(false, null, true));\r\n        }\r\n        else {\r\n            this.backoffId_ = start(doTheRequest, backoffDone, this.timeout_);\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    getPromise() {\r\n        return this.promise_;\r\n    }\r\n    /** @inheritDoc */\r\n    cancel(appDelete) {\r\n        this.canceled_ = true;\r\n        this.appDelete_ = appDelete || false;\r\n        if (this.backoffId_ !== null) {\r\n            stop(this.backoffId_);\r\n        }\r\n        if (this.pendingConnection_ !== null) {\r\n            this.pendingConnection_.abort();\r\n        }\r\n    }\r\n}\r\n/**\r\n * A collection of information about the result of a network request.\r\n * @param opt_canceled - Defaults to false.\r\n */\r\nclass RequestEndStatus {\r\n    constructor(wasSuccessCode, connection, canceled) {\r\n        this.wasSuccessCode = wasSuccessCode;\r\n        this.connection = connection;\r\n        this.canceled = !!canceled;\r\n    }\r\n}\r\nfunction addAuthHeader_(headers, authToken) {\r\n    if (authToken !== null && authToken.length > 0) {\r\n        headers['Authorization'] = 'Firebase ' + authToken;\r\n    }\r\n}\r\nfunction addVersionHeader_(headers, firebaseVersion) {\r\n    headers['X-Firebase-Storage-Version'] =\r\n        'webjs/' + (firebaseVersion !== null && firebaseVersion !== void 0 ? firebaseVersion : 'AppManager');\r\n}\r\nfunction addGmpidHeader_(headers, appId) {\r\n    if (appId) {\r\n        headers['X-Firebase-GMPID'] = appId;\r\n    }\r\n}\r\nfunction addAppCheckHeader_(headers, appCheckToken) {\r\n    if (appCheckToken !== null) {\r\n        headers['X-Firebase-AppCheck'] = appCheckToken;\r\n    }\r\n}\r\nfunction makeRequest(requestInfo, appId, authToken, appCheckToken, requestFactory, firebaseVersion, retry = true) {\r\n    const queryPart = makeQueryString(requestInfo.urlParams);\r\n    const url = requestInfo.url + queryPart;\r\n    const headers = Object.assign({}, requestInfo.headers);\r\n    addGmpidHeader_(headers, appId);\r\n    addAuthHeader_(headers, authToken);\r\n    addVersionHeader_(headers, firebaseVersion);\r\n    addAppCheckHeader_(headers, appCheckToken);\r\n    return new NetworkRequest(url, requestInfo.method, headers, requestInfo.body, requestInfo.successCodes, requestInfo.additionalRetryCodes, requestInfo.handler, requestInfo.errorHandler, requestInfo.timeout, requestInfo.progressCallback, requestFactory, retry);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction getBlobBuilder() {\r\n    if (typeof BlobBuilder !== 'undefined') {\r\n        return BlobBuilder;\r\n    }\r\n    else if (typeof WebKitBlobBuilder !== 'undefined') {\r\n        return WebKitBlobBuilder;\r\n    }\r\n    else {\r\n        return undefined;\r\n    }\r\n}\r\n/**\r\n * Concatenates one or more values together and converts them to a Blob.\r\n *\r\n * @param args The values that will make up the resulting blob.\r\n * @return The blob.\r\n */\r\nfunction getBlob$1(...args) {\r\n    const BlobBuilder = getBlobBuilder();\r\n    if (BlobBuilder !== undefined) {\r\n        const bb = new BlobBuilder();\r\n        for (let i = 0; i < args.length; i++) {\r\n            bb.append(args[i]);\r\n        }\r\n        return bb.getBlob();\r\n    }\r\n    else {\r\n        if (isNativeBlobDefined()) {\r\n            return new Blob(args);\r\n        }\r\n        else {\r\n            throw new StorageError(StorageErrorCode.UNSUPPORTED_ENVIRONMENT, \"This browser doesn't seem to support creating Blobs\");\r\n        }\r\n    }\r\n}\r\n/**\r\n * Slices the blob. The returned blob contains data from the start byte\r\n * (inclusive) till the end byte (exclusive). Negative indices cannot be used.\r\n *\r\n * @param blob The blob to be sliced.\r\n * @param start Index of the starting byte.\r\n * @param end Index of the ending byte.\r\n * @return The blob slice or null if not supported.\r\n */\r\nfunction sliceBlob(blob, start, end) {\r\n    if (blob.webkitSlice) {\r\n        return blob.webkitSlice(start, end);\r\n    }\r\n    else if (blob.mozSlice) {\r\n        return blob.mozSlice(start, end);\r\n    }\r\n    else if (blob.slice) {\r\n        return blob.slice(start, end);\r\n    }\r\n    return null;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/** Converts a Base64 encoded string to a binary string. */\r\nfunction decodeBase64(encoded) {\r\n    if (typeof atob === 'undefined') {\r\n        throw missingPolyFill('base-64');\r\n    }\r\n    return atob(encoded);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An enumeration of the possible string formats for upload.\r\n * @public\r\n */\r\nconst StringFormat = {\r\n    /**\r\n     * Indicates the string should be interpreted \"raw\", that is, as normal text.\r\n     * The string will be interpreted as UTF-16, then uploaded as a UTF-8 byte\r\n     * sequence.\r\n     * Example: The string 'Hello! \\\\ud83d\\\\ude0a' becomes the byte sequence\r\n     * 48 65 6c 6c 6f 21 20 f0 9f 98 8a\r\n     */\r\n    RAW: 'raw',\r\n    /**\r\n     * Indicates the string should be interpreted as base64-encoded data.\r\n     * Padding characters (trailing '='s) are optional.\r\n     * Example: The string 'rWmO++E6t7/rlw==' becomes the byte sequence\r\n     * ad 69 8e fb e1 3a b7 bf eb 97\r\n     */\r\n    BASE64: 'base64',\r\n    /**\r\n     * Indicates the string should be interpreted as base64url-encoded data.\r\n     * Padding characters (trailing '='s) are optional.\r\n     * Example: The string 'rWmO--E6t7_rlw==' becomes the byte sequence\r\n     * ad 69 8e fb e1 3a b7 bf eb 97\r\n     */\r\n    BASE64URL: 'base64url',\r\n    /**\r\n     * Indicates the string is a data URL, such as one obtained from\r\n     * canvas.toDataURL().\r\n     * Example: the string 'data:application/octet-stream;base64,aaaa'\r\n     * becomes the byte sequence\r\n     * 69 a6 9a\r\n     * (the content-type \"application/octet-stream\" is also applied, but can\r\n     * be overridden in the metadata object).\r\n     */\r\n    DATA_URL: 'data_url'\r\n};\r\nclass StringData {\r\n    constructor(data, contentType) {\r\n        this.data = data;\r\n        this.contentType = contentType || null;\r\n    }\r\n}\r\n/**\r\n * @internal\r\n */\r\nfunction dataFromString(format, stringData) {\r\n    switch (format) {\r\n        case StringFormat.RAW:\r\n            return new StringData(utf8Bytes_(stringData));\r\n        case StringFormat.BASE64:\r\n        case StringFormat.BASE64URL:\r\n            return new StringData(base64Bytes_(format, stringData));\r\n        case StringFormat.DATA_URL:\r\n            return new StringData(dataURLBytes_(stringData), dataURLContentType_(stringData));\r\n        // do nothing\r\n    }\r\n    // assert(false);\r\n    throw unknown();\r\n}\r\nfunction utf8Bytes_(value) {\r\n    const b = [];\r\n    for (let i = 0; i < value.length; i++) {\r\n        let c = value.charCodeAt(i);\r\n        if (c <= 127) {\r\n            b.push(c);\r\n        }\r\n        else {\r\n            if (c <= 2047) {\r\n                b.push(192 | (c >> 6), 128 | (c & 63));\r\n            }\r\n            else {\r\n                if ((c & 64512) === 55296) {\r\n                    // The start of a surrogate pair.\r\n                    const valid = i < value.length - 1 && (value.charCodeAt(i + 1) & 64512) === 56320;\r\n                    if (!valid) {\r\n                        // The second surrogate wasn't there.\r\n                        b.push(239, 191, 189);\r\n                    }\r\n                    else {\r\n                        const hi = c;\r\n                        const lo = value.charCodeAt(++i);\r\n                        c = 65536 | ((hi & 1023) << 10) | (lo & 1023);\r\n                        b.push(240 | (c >> 18), 128 | ((c >> 12) & 63), 128 | ((c >> 6) & 63), 128 | (c & 63));\r\n                    }\r\n                }\r\n                else {\r\n                    if ((c & 64512) === 56320) {\r\n                        // Invalid low surrogate.\r\n                        b.push(239, 191, 189);\r\n                    }\r\n                    else {\r\n                        b.push(224 | (c >> 12), 128 | ((c >> 6) & 63), 128 | (c & 63));\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return new Uint8Array(b);\r\n}\r\nfunction percentEncodedBytes_(value) {\r\n    let decoded;\r\n    try {\r\n        decoded = decodeURIComponent(value);\r\n    }\r\n    catch (e) {\r\n        throw invalidFormat(StringFormat.DATA_URL, 'Malformed data URL.');\r\n    }\r\n    return utf8Bytes_(decoded);\r\n}\r\nfunction base64Bytes_(format, value) {\r\n    switch (format) {\r\n        case StringFormat.BASE64: {\r\n            const hasMinus = value.indexOf('-') !== -1;\r\n            const hasUnder = value.indexOf('_') !== -1;\r\n            if (hasMinus || hasUnder) {\r\n                const invalidChar = hasMinus ? '-' : '_';\r\n                throw invalidFormat(format, \"Invalid character '\" +\r\n                    invalidChar +\r\n                    \"' found: is it base64url encoded?\");\r\n            }\r\n            break;\r\n        }\r\n        case StringFormat.BASE64URL: {\r\n            const hasPlus = value.indexOf('+') !== -1;\r\n            const hasSlash = value.indexOf('/') !== -1;\r\n            if (hasPlus || hasSlash) {\r\n                const invalidChar = hasPlus ? '+' : '/';\r\n                throw invalidFormat(format, \"Invalid character '\" + invalidChar + \"' found: is it base64 encoded?\");\r\n            }\r\n            value = value.replace(/-/g, '+').replace(/_/g, '/');\r\n            break;\r\n        }\r\n        // do nothing\r\n    }\r\n    let bytes;\r\n    try {\r\n        bytes = decodeBase64(value);\r\n    }\r\n    catch (e) {\r\n        if (e.message.includes('polyfill')) {\r\n            throw e;\r\n        }\r\n        throw invalidFormat(format, 'Invalid character found');\r\n    }\r\n    const array = new Uint8Array(bytes.length);\r\n    for (let i = 0; i < bytes.length; i++) {\r\n        array[i] = bytes.charCodeAt(i);\r\n    }\r\n    return array;\r\n}\r\nclass DataURLParts {\r\n    constructor(dataURL) {\r\n        this.base64 = false;\r\n        this.contentType = null;\r\n        const matches = dataURL.match(/^data:([^,]+)?,/);\r\n        if (matches === null) {\r\n            throw invalidFormat(StringFormat.DATA_URL, \"Must be formatted 'data:[<mediatype>][;base64],<data>\");\r\n        }\r\n        const middle = matches[1] || null;\r\n        if (middle != null) {\r\n            this.base64 = endsWith(middle, ';base64');\r\n            this.contentType = this.base64\r\n                ? middle.substring(0, middle.length - ';base64'.length)\r\n                : middle;\r\n        }\r\n        this.rest = dataURL.substring(dataURL.indexOf(',') + 1);\r\n    }\r\n}\r\nfunction dataURLBytes_(dataUrl) {\r\n    const parts = new DataURLParts(dataUrl);\r\n    if (parts.base64) {\r\n        return base64Bytes_(StringFormat.BASE64, parts.rest);\r\n    }\r\n    else {\r\n        return percentEncodedBytes_(parts.rest);\r\n    }\r\n}\r\nfunction dataURLContentType_(dataUrl) {\r\n    const parts = new DataURLParts(dataUrl);\r\n    return parts.contentType;\r\n}\r\nfunction endsWith(s, end) {\r\n    const longEnough = s.length >= end.length;\r\n    if (!longEnough) {\r\n        return false;\r\n    }\r\n    return s.substring(s.length - end.length) === end;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @param opt_elideCopy - If true, doesn't copy mutable input data\r\n *     (e.g. Uint8Arrays). Pass true only if you know the objects will not be\r\n *     modified after this blob's construction.\r\n *\r\n * @internal\r\n */\r\nclass FbsBlob {\r\n    constructor(data, elideCopy) {\r\n        let size = 0;\r\n        let blobType = '';\r\n        if (isNativeBlob(data)) {\r\n            this.data_ = data;\r\n            size = data.size;\r\n            blobType = data.type;\r\n        }\r\n        else if (data instanceof ArrayBuffer) {\r\n            if (elideCopy) {\r\n                this.data_ = new Uint8Array(data);\r\n            }\r\n            else {\r\n                this.data_ = new Uint8Array(data.byteLength);\r\n                this.data_.set(new Uint8Array(data));\r\n            }\r\n            size = this.data_.length;\r\n        }\r\n        else if (data instanceof Uint8Array) {\r\n            if (elideCopy) {\r\n                this.data_ = data;\r\n            }\r\n            else {\r\n                this.data_ = new Uint8Array(data.length);\r\n                this.data_.set(data);\r\n            }\r\n            size = data.length;\r\n        }\r\n        this.size_ = size;\r\n        this.type_ = blobType;\r\n    }\r\n    size() {\r\n        return this.size_;\r\n    }\r\n    type() {\r\n        return this.type_;\r\n    }\r\n    slice(startByte, endByte) {\r\n        if (isNativeBlob(this.data_)) {\r\n            const realBlob = this.data_;\r\n            const sliced = sliceBlob(realBlob, startByte, endByte);\r\n            if (sliced === null) {\r\n                return null;\r\n            }\r\n            return new FbsBlob(sliced);\r\n        }\r\n        else {\r\n            const slice = new Uint8Array(this.data_.buffer, startByte, endByte - startByte);\r\n            return new FbsBlob(slice, true);\r\n        }\r\n    }\r\n    static getBlob(...args) {\r\n        if (isNativeBlobDefined()) {\r\n            const blobby = args.map((val) => {\r\n                if (val instanceof FbsBlob) {\r\n                    return val.data_;\r\n                }\r\n                else {\r\n                    return val;\r\n                }\r\n            });\r\n            return new FbsBlob(getBlob$1.apply(null, blobby));\r\n        }\r\n        else {\r\n            const uint8Arrays = args.map((val) => {\r\n                if (isString(val)) {\r\n                    return dataFromString(StringFormat.RAW, val).data;\r\n                }\r\n                else {\r\n                    // Blobs don't exist, so this has to be a Uint8Array.\r\n                    return val.data_;\r\n                }\r\n            });\r\n            let finalLength = 0;\r\n            uint8Arrays.forEach((array) => {\r\n                finalLength += array.byteLength;\r\n            });\r\n            const merged = new Uint8Array(finalLength);\r\n            let index = 0;\r\n            uint8Arrays.forEach((array) => {\r\n                for (let i = 0; i < array.length; i++) {\r\n                    merged[index++] = array[i];\r\n                }\r\n            });\r\n            return new FbsBlob(merged, true);\r\n        }\r\n    }\r\n    uploadData() {\r\n        return this.data_;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Returns the Object resulting from parsing the given JSON, or null if the\r\n * given string does not represent a JSON object.\r\n */\r\nfunction jsonObjectOrNull(s) {\r\n    let obj;\r\n    try {\r\n        obj = JSON.parse(s);\r\n    }\r\n    catch (e) {\r\n        return null;\r\n    }\r\n    if (isNonArrayObject(obj)) {\r\n        return obj;\r\n    }\r\n    else {\r\n        return null;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @fileoverview Contains helper methods for manipulating paths.\r\n */\r\n/**\r\n * @return Null if the path is already at the root.\r\n */\r\nfunction parent(path) {\r\n    if (path.length === 0) {\r\n        return null;\r\n    }\r\n    const index = path.lastIndexOf('/');\r\n    if (index === -1) {\r\n        return '';\r\n    }\r\n    const newPath = path.slice(0, index);\r\n    return newPath;\r\n}\r\nfunction child(path, childPath) {\r\n    const canonicalChildPath = childPath\r\n        .split('/')\r\n        .filter(component => component.length > 0)\r\n        .join('/');\r\n    if (path.length === 0) {\r\n        return canonicalChildPath;\r\n    }\r\n    else {\r\n        return path + '/' + canonicalChildPath;\r\n    }\r\n}\r\n/**\r\n * Returns the last component of a path.\r\n * '/foo/bar' -> 'bar'\r\n * '/foo/bar/baz/' -> 'baz/'\r\n * '/a' -> 'a'\r\n */\r\nfunction lastComponent(path) {\r\n    const index = path.lastIndexOf('/', path.length - 2);\r\n    if (index === -1) {\r\n        return path;\r\n    }\r\n    else {\r\n        return path.slice(index + 1);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction noXform_(metadata, value) {\r\n    return value;\r\n}\r\nclass Mapping {\r\n    constructor(server, local, writable, xform) {\r\n        this.server = server;\r\n        this.local = local || server;\r\n        this.writable = !!writable;\r\n        this.xform = xform || noXform_;\r\n    }\r\n}\r\nlet mappings_ = null;\r\nfunction xformPath(fullPath) {\r\n    if (!isString(fullPath) || fullPath.length < 2) {\r\n        return fullPath;\r\n    }\r\n    else {\r\n        return lastComponent(fullPath);\r\n    }\r\n}\r\nfunction getMappings() {\r\n    if (mappings_) {\r\n        return mappings_;\r\n    }\r\n    const mappings = [];\r\n    mappings.push(new Mapping('bucket'));\r\n    mappings.push(new Mapping('generation'));\r\n    mappings.push(new Mapping('metageneration'));\r\n    mappings.push(new Mapping('name', 'fullPath', true));\r\n    function mappingsXformPath(_metadata, fullPath) {\r\n        return xformPath(fullPath);\r\n    }\r\n    const nameMapping = new Mapping('name');\r\n    nameMapping.xform = mappingsXformPath;\r\n    mappings.push(nameMapping);\r\n    /**\r\n     * Coerces the second param to a number, if it is defined.\r\n     */\r\n    function xformSize(_metadata, size) {\r\n        if (size !== undefined) {\r\n            return Number(size);\r\n        }\r\n        else {\r\n            return size;\r\n        }\r\n    }\r\n    const sizeMapping = new Mapping('size');\r\n    sizeMapping.xform = xformSize;\r\n    mappings.push(sizeMapping);\r\n    mappings.push(new Mapping('timeCreated'));\r\n    mappings.push(new Mapping('updated'));\r\n    mappings.push(new Mapping('md5Hash', null, true));\r\n    mappings.push(new Mapping('cacheControl', null, true));\r\n    mappings.push(new Mapping('contentDisposition', null, true));\r\n    mappings.push(new Mapping('contentEncoding', null, true));\r\n    mappings.push(new Mapping('contentLanguage', null, true));\r\n    mappings.push(new Mapping('contentType', null, true));\r\n    mappings.push(new Mapping('metadata', 'customMetadata', true));\r\n    mappings_ = mappings;\r\n    return mappings_;\r\n}\r\nfunction addRef(metadata, service) {\r\n    function generateRef() {\r\n        const bucket = metadata['bucket'];\r\n        const path = metadata['fullPath'];\r\n        const loc = new Location(bucket, path);\r\n        return service._makeStorageReference(loc);\r\n    }\r\n    Object.defineProperty(metadata, 'ref', { get: generateRef });\r\n}\r\nfunction fromResource(service, resource, mappings) {\r\n    const metadata = {};\r\n    metadata['type'] = 'file';\r\n    const len = mappings.length;\r\n    for (let i = 0; i < len; i++) {\r\n        const mapping = mappings[i];\r\n        metadata[mapping.local] = mapping.xform(metadata, resource[mapping.server]);\r\n    }\r\n    addRef(metadata, service);\r\n    return metadata;\r\n}\r\nfunction fromResourceString(service, resourceString, mappings) {\r\n    const obj = jsonObjectOrNull(resourceString);\r\n    if (obj === null) {\r\n        return null;\r\n    }\r\n    const resource = obj;\r\n    return fromResource(service, resource, mappings);\r\n}\r\nfunction downloadUrlFromResourceString(metadata, resourceString, host, protocol) {\r\n    const obj = jsonObjectOrNull(resourceString);\r\n    if (obj === null) {\r\n        return null;\r\n    }\r\n    if (!isString(obj['downloadTokens'])) {\r\n        // This can happen if objects are uploaded through GCS and retrieved\r\n        // through list, so we don't want to throw an Error.\r\n        return null;\r\n    }\r\n    const tokens = obj['downloadTokens'];\r\n    if (tokens.length === 0) {\r\n        return null;\r\n    }\r\n    const encode = encodeURIComponent;\r\n    const tokensList = tokens.split(',');\r\n    const urls = tokensList.map((token) => {\r\n        const bucket = metadata['bucket'];\r\n        const path = metadata['fullPath'];\r\n        const urlPart = '/b/' + encode(bucket) + '/o/' + encode(path);\r\n        const base = makeUrl(urlPart, host, protocol);\r\n        const queryString = makeQueryString({\r\n            alt: 'media',\r\n            token\r\n        });\r\n        return base + queryString;\r\n    });\r\n    return urls[0];\r\n}\r\nfunction toResourceString(metadata, mappings) {\r\n    const resource = {};\r\n    const len = mappings.length;\r\n    for (let i = 0; i < len; i++) {\r\n        const mapping = mappings[i];\r\n        if (mapping.writable) {\r\n            resource[mapping.server] = metadata[mapping.local];\r\n        }\r\n    }\r\n    return JSON.stringify(resource);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst PREFIXES_KEY = 'prefixes';\r\nconst ITEMS_KEY = 'items';\r\nfunction fromBackendResponse(service, bucket, resource) {\r\n    const listResult = {\r\n        prefixes: [],\r\n        items: [],\r\n        nextPageToken: resource['nextPageToken']\r\n    };\r\n    if (resource[PREFIXES_KEY]) {\r\n        for (const path of resource[PREFIXES_KEY]) {\r\n            const pathWithoutTrailingSlash = path.replace(/\\/$/, '');\r\n            const reference = service._makeStorageReference(new Location(bucket, pathWithoutTrailingSlash));\r\n            listResult.prefixes.push(reference);\r\n        }\r\n    }\r\n    if (resource[ITEMS_KEY]) {\r\n        for (const item of resource[ITEMS_KEY]) {\r\n            const reference = service._makeStorageReference(new Location(bucket, item['name']));\r\n            listResult.items.push(reference);\r\n        }\r\n    }\r\n    return listResult;\r\n}\r\nfunction fromResponseString(service, bucket, resourceString) {\r\n    const obj = jsonObjectOrNull(resourceString);\r\n    if (obj === null) {\r\n        return null;\r\n    }\r\n    const resource = obj;\r\n    return fromBackendResponse(service, bucket, resource);\r\n}\n\n/**\r\n * Contains a fully specified request.\r\n *\r\n * @param I - the type of the backend's network response.\r\n * @param O - the output response type used by the rest of the SDK.\r\n */\r\nclass RequestInfo {\r\n    constructor(url, method, \r\n    /**\r\n     * Returns the value with which to resolve the request's promise. Only called\r\n     * if the request is successful. Throw from this function to reject the\r\n     * returned Request's promise with the thrown error.\r\n     * Note: The XhrIo passed to this function may be reused after this callback\r\n     * returns. Do not keep a reference to it in any way.\r\n     */\r\n    handler, timeout) {\r\n        this.url = url;\r\n        this.method = method;\r\n        this.handler = handler;\r\n        this.timeout = timeout;\r\n        this.urlParams = {};\r\n        this.headers = {};\r\n        this.body = null;\r\n        this.errorHandler = null;\r\n        /**\r\n         * Called with the current number of bytes uploaded and total size (-1 if not\r\n         * computable) of the request body (i.e. used to report upload progress).\r\n         */\r\n        this.progressCallback = null;\r\n        this.successCodes = [200];\r\n        this.additionalRetryCodes = [];\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Throws the UNKNOWN StorageError if cndn is false.\r\n */\r\nfunction handlerCheck(cndn) {\r\n    if (!cndn) {\r\n        throw unknown();\r\n    }\r\n}\r\nfunction metadataHandler(service, mappings) {\r\n    function handler(xhr, text) {\r\n        const metadata = fromResourceString(service, text, mappings);\r\n        handlerCheck(metadata !== null);\r\n        return metadata;\r\n    }\r\n    return handler;\r\n}\r\nfunction listHandler(service, bucket) {\r\n    function handler(xhr, text) {\r\n        const listResult = fromResponseString(service, bucket, text);\r\n        handlerCheck(listResult !== null);\r\n        return listResult;\r\n    }\r\n    return handler;\r\n}\r\nfunction downloadUrlHandler(service, mappings) {\r\n    function handler(xhr, text) {\r\n        const metadata = fromResourceString(service, text, mappings);\r\n        handlerCheck(metadata !== null);\r\n        return downloadUrlFromResourceString(metadata, text, service.host, service._protocol);\r\n    }\r\n    return handler;\r\n}\r\nfunction sharedErrorHandler(location) {\r\n    function errorHandler(xhr, err) {\r\n        let newErr;\r\n        if (xhr.getStatus() === 401) {\r\n            if (\r\n            // This exact message string is the only consistent part of the\r\n            // server's error response that identifies it as an App Check error.\r\n            xhr.getErrorText().includes('Firebase App Check token is invalid')) {\r\n                newErr = unauthorizedApp();\r\n            }\r\n            else {\r\n                newErr = unauthenticated();\r\n            }\r\n        }\r\n        else {\r\n            if (xhr.getStatus() === 402) {\r\n                newErr = quotaExceeded(location.bucket);\r\n            }\r\n            else {\r\n                if (xhr.getStatus() === 403) {\r\n                    newErr = unauthorized(location.path);\r\n                }\r\n                else {\r\n                    newErr = err;\r\n                }\r\n            }\r\n        }\r\n        newErr.status = xhr.getStatus();\r\n        newErr.serverResponse = err.serverResponse;\r\n        return newErr;\r\n    }\r\n    return errorHandler;\r\n}\r\nfunction objectErrorHandler(location) {\r\n    const shared = sharedErrorHandler(location);\r\n    function errorHandler(xhr, err) {\r\n        let newErr = shared(xhr, err);\r\n        if (xhr.getStatus() === 404) {\r\n            newErr = objectNotFound(location.path);\r\n        }\r\n        newErr.serverResponse = err.serverResponse;\r\n        return newErr;\r\n    }\r\n    return errorHandler;\r\n}\r\nfunction getMetadata$2(service, location, mappings) {\r\n    const urlPart = location.fullServerUrl();\r\n    const url = makeUrl(urlPart, service.host, service._protocol);\r\n    const method = 'GET';\r\n    const timeout = service.maxOperationRetryTime;\r\n    const requestInfo = new RequestInfo(url, method, metadataHandler(service, mappings), timeout);\r\n    requestInfo.errorHandler = objectErrorHandler(location);\r\n    return requestInfo;\r\n}\r\nfunction list$2(service, location, delimiter, pageToken, maxResults) {\r\n    const urlParams = {};\r\n    if (location.isRoot) {\r\n        urlParams['prefix'] = '';\r\n    }\r\n    else {\r\n        urlParams['prefix'] = location.path + '/';\r\n    }\r\n    if (delimiter && delimiter.length > 0) {\r\n        urlParams['delimiter'] = delimiter;\r\n    }\r\n    if (pageToken) {\r\n        urlParams['pageToken'] = pageToken;\r\n    }\r\n    if (maxResults) {\r\n        urlParams['maxResults'] = maxResults;\r\n    }\r\n    const urlPart = location.bucketOnlyServerUrl();\r\n    const url = makeUrl(urlPart, service.host, service._protocol);\r\n    const method = 'GET';\r\n    const timeout = service.maxOperationRetryTime;\r\n    const requestInfo = new RequestInfo(url, method, listHandler(service, location.bucket), timeout);\r\n    requestInfo.urlParams = urlParams;\r\n    requestInfo.errorHandler = sharedErrorHandler(location);\r\n    return requestInfo;\r\n}\r\nfunction getBytes$1(service, location, maxDownloadSizeBytes) {\r\n    const urlPart = location.fullServerUrl();\r\n    const url = makeUrl(urlPart, service.host, service._protocol) + '?alt=media';\r\n    const method = 'GET';\r\n    const timeout = service.maxOperationRetryTime;\r\n    const requestInfo = new RequestInfo(url, method, (_, data) => data, timeout);\r\n    requestInfo.errorHandler = objectErrorHandler(location);\r\n    if (maxDownloadSizeBytes !== undefined) {\r\n        requestInfo.headers['Range'] = `bytes=0-${maxDownloadSizeBytes}`;\r\n        requestInfo.successCodes = [200 /* OK */, 206 /* Partial Content */];\r\n    }\r\n    return requestInfo;\r\n}\r\nfunction getDownloadUrl(service, location, mappings) {\r\n    const urlPart = location.fullServerUrl();\r\n    const url = makeUrl(urlPart, service.host, service._protocol);\r\n    const method = 'GET';\r\n    const timeout = service.maxOperationRetryTime;\r\n    const requestInfo = new RequestInfo(url, method, downloadUrlHandler(service, mappings), timeout);\r\n    requestInfo.errorHandler = objectErrorHandler(location);\r\n    return requestInfo;\r\n}\r\nfunction updateMetadata$2(service, location, metadata, mappings) {\r\n    const urlPart = location.fullServerUrl();\r\n    const url = makeUrl(urlPart, service.host, service._protocol);\r\n    const method = 'PATCH';\r\n    const body = toResourceString(metadata, mappings);\r\n    const headers = { 'Content-Type': 'application/json; charset=utf-8' };\r\n    const timeout = service.maxOperationRetryTime;\r\n    const requestInfo = new RequestInfo(url, method, metadataHandler(service, mappings), timeout);\r\n    requestInfo.headers = headers;\r\n    requestInfo.body = body;\r\n    requestInfo.errorHandler = objectErrorHandler(location);\r\n    return requestInfo;\r\n}\r\nfunction deleteObject$2(service, location) {\r\n    const urlPart = location.fullServerUrl();\r\n    const url = makeUrl(urlPart, service.host, service._protocol);\r\n    const method = 'DELETE';\r\n    const timeout = service.maxOperationRetryTime;\r\n    function handler(_xhr, _text) { }\r\n    const requestInfo = new RequestInfo(url, method, handler, timeout);\r\n    requestInfo.successCodes = [200, 204];\r\n    requestInfo.errorHandler = objectErrorHandler(location);\r\n    return requestInfo;\r\n}\r\nfunction determineContentType_(metadata, blob) {\r\n    return ((metadata && metadata['contentType']) ||\r\n        (blob && blob.type()) ||\r\n        'application/octet-stream');\r\n}\r\nfunction metadataForUpload_(location, blob, metadata) {\r\n    const metadataClone = Object.assign({}, metadata);\r\n    metadataClone['fullPath'] = location.path;\r\n    metadataClone['size'] = blob.size();\r\n    if (!metadataClone['contentType']) {\r\n        metadataClone['contentType'] = determineContentType_(null, blob);\r\n    }\r\n    return metadataClone;\r\n}\r\n/**\r\n * Prepare RequestInfo for uploads as Content-Type: multipart.\r\n */\r\nfunction multipartUpload(service, location, mappings, blob, metadata) {\r\n    const urlPart = location.bucketOnlyServerUrl();\r\n    const headers = {\r\n        'X-Goog-Upload-Protocol': 'multipart'\r\n    };\r\n    function genBoundary() {\r\n        let str = '';\r\n        for (let i = 0; i < 2; i++) {\r\n            str = str + Math.random().toString().slice(2);\r\n        }\r\n        return str;\r\n    }\r\n    const boundary = genBoundary();\r\n    headers['Content-Type'] = 'multipart/related; boundary=' + boundary;\r\n    const metadata_ = metadataForUpload_(location, blob, metadata);\r\n    const metadataString = toResourceString(metadata_, mappings);\r\n    const preBlobPart = '--' +\r\n        boundary +\r\n        '\\r\\n' +\r\n        'Content-Type: application/json; charset=utf-8\\r\\n\\r\\n' +\r\n        metadataString +\r\n        '\\r\\n--' +\r\n        boundary +\r\n        '\\r\\n' +\r\n        'Content-Type: ' +\r\n        metadata_['contentType'] +\r\n        '\\r\\n\\r\\n';\r\n    const postBlobPart = '\\r\\n--' + boundary + '--';\r\n    const body = FbsBlob.getBlob(preBlobPart, blob, postBlobPart);\r\n    if (body === null) {\r\n        throw cannotSliceBlob();\r\n    }\r\n    const urlParams = { name: metadata_['fullPath'] };\r\n    const url = makeUrl(urlPart, service.host, service._protocol);\r\n    const method = 'POST';\r\n    const timeout = service.maxUploadRetryTime;\r\n    const requestInfo = new RequestInfo(url, method, metadataHandler(service, mappings), timeout);\r\n    requestInfo.urlParams = urlParams;\r\n    requestInfo.headers = headers;\r\n    requestInfo.body = body.uploadData();\r\n    requestInfo.errorHandler = sharedErrorHandler(location);\r\n    return requestInfo;\r\n}\r\n/**\r\n * @param current The number of bytes that have been uploaded so far.\r\n * @param total The total number of bytes in the upload.\r\n * @param opt_finalized True if the server has finished the upload.\r\n * @param opt_metadata The upload metadata, should\r\n *     only be passed if opt_finalized is true.\r\n */\r\nclass ResumableUploadStatus {\r\n    constructor(current, total, finalized, metadata) {\r\n        this.current = current;\r\n        this.total = total;\r\n        this.finalized = !!finalized;\r\n        this.metadata = metadata || null;\r\n    }\r\n}\r\nfunction checkResumeHeader_(xhr, allowed) {\r\n    let status = null;\r\n    try {\r\n        status = xhr.getResponseHeader('X-Goog-Upload-Status');\r\n    }\r\n    catch (e) {\r\n        handlerCheck(false);\r\n    }\r\n    const allowedStatus = allowed || ['active'];\r\n    handlerCheck(!!status && allowedStatus.indexOf(status) !== -1);\r\n    return status;\r\n}\r\nfunction createResumableUpload(service, location, mappings, blob, metadata) {\r\n    const urlPart = location.bucketOnlyServerUrl();\r\n    const metadataForUpload = metadataForUpload_(location, blob, metadata);\r\n    const urlParams = { name: metadataForUpload['fullPath'] };\r\n    const url = makeUrl(urlPart, service.host, service._protocol);\r\n    const method = 'POST';\r\n    const headers = {\r\n        'X-Goog-Upload-Protocol': 'resumable',\r\n        'X-Goog-Upload-Command': 'start',\r\n        'X-Goog-Upload-Header-Content-Length': `${blob.size()}`,\r\n        'X-Goog-Upload-Header-Content-Type': metadataForUpload['contentType'],\r\n        'Content-Type': 'application/json; charset=utf-8'\r\n    };\r\n    const body = toResourceString(metadataForUpload, mappings);\r\n    const timeout = service.maxUploadRetryTime;\r\n    function handler(xhr) {\r\n        checkResumeHeader_(xhr);\r\n        let url;\r\n        try {\r\n            url = xhr.getResponseHeader('X-Goog-Upload-URL');\r\n        }\r\n        catch (e) {\r\n            handlerCheck(false);\r\n        }\r\n        handlerCheck(isString(url));\r\n        return url;\r\n    }\r\n    const requestInfo = new RequestInfo(url, method, handler, timeout);\r\n    requestInfo.urlParams = urlParams;\r\n    requestInfo.headers = headers;\r\n    requestInfo.body = body;\r\n    requestInfo.errorHandler = sharedErrorHandler(location);\r\n    return requestInfo;\r\n}\r\n/**\r\n * @param url From a call to fbs.requests.createResumableUpload.\r\n */\r\nfunction getResumableUploadStatus(service, location, url, blob) {\r\n    const headers = { 'X-Goog-Upload-Command': 'query' };\r\n    function handler(xhr) {\r\n        const status = checkResumeHeader_(xhr, ['active', 'final']);\r\n        let sizeString = null;\r\n        try {\r\n            sizeString = xhr.getResponseHeader('X-Goog-Upload-Size-Received');\r\n        }\r\n        catch (e) {\r\n            handlerCheck(false);\r\n        }\r\n        if (!sizeString) {\r\n            // null or empty string\r\n            handlerCheck(false);\r\n        }\r\n        const size = Number(sizeString);\r\n        handlerCheck(!isNaN(size));\r\n        return new ResumableUploadStatus(size, blob.size(), status === 'final');\r\n    }\r\n    const method = 'POST';\r\n    const timeout = service.maxUploadRetryTime;\r\n    const requestInfo = new RequestInfo(url, method, handler, timeout);\r\n    requestInfo.headers = headers;\r\n    requestInfo.errorHandler = sharedErrorHandler(location);\r\n    return requestInfo;\r\n}\r\n/**\r\n * Any uploads via the resumable upload API must transfer a number of bytes\r\n * that is a multiple of this number.\r\n */\r\nconst RESUMABLE_UPLOAD_CHUNK_SIZE = 256 * 1024;\r\n/**\r\n * @param url From a call to fbs.requests.createResumableUpload.\r\n * @param chunkSize Number of bytes to upload.\r\n * @param status The previous status.\r\n *     If not passed or null, we start from the beginning.\r\n * @throws fbs.Error If the upload is already complete, the passed in status\r\n *     has a final size inconsistent with the blob, or the blob cannot be sliced\r\n *     for upload.\r\n */\r\nfunction continueResumableUpload(location, service, url, blob, chunkSize, mappings, status, progressCallback) {\r\n    // TODO(andysoto): standardize on internal asserts\r\n    // assert(!(opt_status && opt_status.finalized));\r\n    const status_ = new ResumableUploadStatus(0, 0);\r\n    if (status) {\r\n        status_.current = status.current;\r\n        status_.total = status.total;\r\n    }\r\n    else {\r\n        status_.current = 0;\r\n        status_.total = blob.size();\r\n    }\r\n    if (blob.size() !== status_.total) {\r\n        throw serverFileWrongSize();\r\n    }\r\n    const bytesLeft = status_.total - status_.current;\r\n    let bytesToUpload = bytesLeft;\r\n    if (chunkSize > 0) {\r\n        bytesToUpload = Math.min(bytesToUpload, chunkSize);\r\n    }\r\n    const startByte = status_.current;\r\n    const endByte = startByte + bytesToUpload;\r\n    let uploadCommand = '';\r\n    if (bytesToUpload === 0) {\r\n        uploadCommand = 'finalize';\r\n    }\r\n    else if (bytesLeft === bytesToUpload) {\r\n        uploadCommand = 'upload, finalize';\r\n    }\r\n    else {\r\n        uploadCommand = 'upload';\r\n    }\r\n    const headers = {\r\n        'X-Goog-Upload-Command': uploadCommand,\r\n        'X-Goog-Upload-Offset': `${status_.current}`\r\n    };\r\n    const body = blob.slice(startByte, endByte);\r\n    if (body === null) {\r\n        throw cannotSliceBlob();\r\n    }\r\n    function handler(xhr, text) {\r\n        // TODO(andysoto): Verify the MD5 of each uploaded range:\r\n        // the 'x-range-md5' header comes back with status code 308 responses.\r\n        // We'll only be able to bail out though, because you can't re-upload a\r\n        // range that you previously uploaded.\r\n        const uploadStatus = checkResumeHeader_(xhr, ['active', 'final']);\r\n        const newCurrent = status_.current + bytesToUpload;\r\n        const size = blob.size();\r\n        let metadata;\r\n        if (uploadStatus === 'final') {\r\n            metadata = metadataHandler(service, mappings)(xhr, text);\r\n        }\r\n        else {\r\n            metadata = null;\r\n        }\r\n        return new ResumableUploadStatus(newCurrent, size, uploadStatus === 'final', metadata);\r\n    }\r\n    const method = 'POST';\r\n    const timeout = service.maxUploadRetryTime;\r\n    const requestInfo = new RequestInfo(url, method, handler, timeout);\r\n    requestInfo.headers = headers;\r\n    requestInfo.body = body.uploadData();\r\n    requestInfo.progressCallback = progressCallback || null;\r\n    requestInfo.errorHandler = sharedErrorHandler(location);\r\n    return requestInfo;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An event that is triggered on a task.\r\n * @internal\r\n */\r\nconst TaskEvent = {\r\n    /**\r\n     * For this event,\r\n     * <ul>\r\n     *   <li>The `next` function is triggered on progress updates and when the\r\n     *       task is paused/resumed with an `UploadTaskSnapshot` as the first\r\n     *       argument.</li>\r\n     *   <li>The `error` function is triggered if the upload is canceled or fails\r\n     *       for another reason.</li>\r\n     *   <li>The `complete` function is triggered if the upload completes\r\n     *       successfully.</li>\r\n     * </ul>\r\n     */\r\n    STATE_CHANGED: 'state_changed'\r\n};\r\n// type keys = keyof TaskState\r\n/**\r\n * Represents the current state of a running upload.\r\n * @internal\r\n */\r\nconst TaskState = {\r\n    /** The task is currently transferring data. */\r\n    RUNNING: 'running',\r\n    /** The task was paused by the user. */\r\n    PAUSED: 'paused',\r\n    /** The task completed successfully. */\r\n    SUCCESS: 'success',\r\n    /** The task was canceled. */\r\n    CANCELED: 'canceled',\r\n    /** The task failed with an error. */\r\n    ERROR: 'error'\r\n};\r\nfunction taskStateFromInternalTaskState(state) {\r\n    switch (state) {\r\n        case \"running\" /* InternalTaskState.RUNNING */:\r\n        case \"pausing\" /* InternalTaskState.PAUSING */:\r\n        case \"canceling\" /* InternalTaskState.CANCELING */:\r\n            return TaskState.RUNNING;\r\n        case \"paused\" /* InternalTaskState.PAUSED */:\r\n            return TaskState.PAUSED;\r\n        case \"success\" /* InternalTaskState.SUCCESS */:\r\n            return TaskState.SUCCESS;\r\n        case \"canceled\" /* InternalTaskState.CANCELED */:\r\n            return TaskState.CANCELED;\r\n        case \"error\" /* InternalTaskState.ERROR */:\r\n            return TaskState.ERROR;\r\n        default:\r\n            // TODO(andysoto): assert(false);\r\n            return TaskState.ERROR;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass Observer {\r\n    constructor(nextOrObserver, error, complete) {\r\n        const asFunctions = isFunction(nextOrObserver) || error != null || complete != null;\r\n        if (asFunctions) {\r\n            this.next = nextOrObserver;\r\n            this.error = error !== null && error !== void 0 ? error : undefined;\r\n            this.complete = complete !== null && complete !== void 0 ? complete : undefined;\r\n        }\r\n        else {\r\n            const observer = nextOrObserver;\r\n            this.next = observer.next;\r\n            this.error = observer.error;\r\n            this.complete = observer.complete;\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Returns a function that invokes f with its arguments asynchronously as a\r\n * microtask, i.e. as soon as possible after the current script returns back\r\n * into browser code.\r\n */\r\n// eslint-disable-next-line @typescript-eslint/ban-types\r\nfunction async(f) {\r\n    return (...argsToForward) => {\r\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n        Promise.resolve().then(() => f(...argsToForward));\r\n    };\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/** An override for the text-based Connection. Used in tests. */\r\nlet textFactoryOverride = null;\r\n/**\r\n * Network layer for browsers. We use this instead of goog.net.XhrIo because\r\n * goog.net.XhrIo is hyuuuuge and doesn't work in React Native on Android.\r\n */\r\nclass XhrConnection {\r\n    constructor() {\r\n        this.sent_ = false;\r\n        this.xhr_ = new XMLHttpRequest();\r\n        this.initXhr();\r\n        this.errorCode_ = ErrorCode.NO_ERROR;\r\n        this.sendPromise_ = new Promise(resolve => {\r\n            this.xhr_.addEventListener('abort', () => {\r\n                this.errorCode_ = ErrorCode.ABORT;\r\n                resolve();\r\n            });\r\n            this.xhr_.addEventListener('error', () => {\r\n                this.errorCode_ = ErrorCode.NETWORK_ERROR;\r\n                resolve();\r\n            });\r\n            this.xhr_.addEventListener('load', () => {\r\n                resolve();\r\n            });\r\n        });\r\n    }\r\n    send(url, method, body, headers) {\r\n        if (this.sent_) {\r\n            throw internalError('cannot .send() more than once');\r\n        }\r\n        this.sent_ = true;\r\n        this.xhr_.open(method, url, true);\r\n        if (headers !== undefined) {\r\n            for (const key in headers) {\r\n                if (headers.hasOwnProperty(key)) {\r\n                    this.xhr_.setRequestHeader(key, headers[key].toString());\r\n                }\r\n            }\r\n        }\r\n        if (body !== undefined) {\r\n            this.xhr_.send(body);\r\n        }\r\n        else {\r\n            this.xhr_.send();\r\n        }\r\n        return this.sendPromise_;\r\n    }\r\n    getErrorCode() {\r\n        if (!this.sent_) {\r\n            throw internalError('cannot .getErrorCode() before sending');\r\n        }\r\n        return this.errorCode_;\r\n    }\r\n    getStatus() {\r\n        if (!this.sent_) {\r\n            throw internalError('cannot .getStatus() before sending');\r\n        }\r\n        try {\r\n            return this.xhr_.status;\r\n        }\r\n        catch (e) {\r\n            return -1;\r\n        }\r\n    }\r\n    getResponse() {\r\n        if (!this.sent_) {\r\n            throw internalError('cannot .getResponse() before sending');\r\n        }\r\n        return this.xhr_.response;\r\n    }\r\n    getErrorText() {\r\n        if (!this.sent_) {\r\n            throw internalError('cannot .getErrorText() before sending');\r\n        }\r\n        return this.xhr_.statusText;\r\n    }\r\n    /** Aborts the request. */\r\n    abort() {\r\n        this.xhr_.abort();\r\n    }\r\n    getResponseHeader(header) {\r\n        return this.xhr_.getResponseHeader(header);\r\n    }\r\n    addUploadProgressListener(listener) {\r\n        if (this.xhr_.upload != null) {\r\n            this.xhr_.upload.addEventListener('progress', listener);\r\n        }\r\n    }\r\n    removeUploadProgressListener(listener) {\r\n        if (this.xhr_.upload != null) {\r\n            this.xhr_.upload.removeEventListener('progress', listener);\r\n        }\r\n    }\r\n}\r\nclass XhrTextConnection extends XhrConnection {\r\n    initXhr() {\r\n        this.xhr_.responseType = 'text';\r\n    }\r\n}\r\nfunction newTextConnection() {\r\n    return textFactoryOverride ? textFactoryOverride() : new XhrTextConnection();\r\n}\r\nclass XhrBytesConnection extends XhrConnection {\r\n    initXhr() {\r\n        this.xhr_.responseType = 'arraybuffer';\r\n    }\r\n}\r\nfunction newBytesConnection() {\r\n    return new XhrBytesConnection();\r\n}\r\nclass XhrBlobConnection extends XhrConnection {\r\n    initXhr() {\r\n        this.xhr_.responseType = 'blob';\r\n    }\r\n}\r\nfunction newBlobConnection() {\r\n    return new XhrBlobConnection();\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Represents a blob being uploaded. Can be used to pause/resume/cancel the\r\n * upload and manage callbacks for various events.\r\n * @internal\r\n */\r\nclass UploadTask {\r\n    /**\r\n     * @param ref - The firebaseStorage.Reference object this task came\r\n     *     from, untyped to avoid cyclic dependencies.\r\n     * @param blob - The blob to upload.\r\n     */\r\n    constructor(ref, blob, metadata = null) {\r\n        /**\r\n         * Number of bytes transferred so far.\r\n         */\r\n        this._transferred = 0;\r\n        this._needToFetchStatus = false;\r\n        this._needToFetchMetadata = false;\r\n        this._observers = [];\r\n        this._error = undefined;\r\n        this._uploadUrl = undefined;\r\n        this._request = undefined;\r\n        this._chunkMultiplier = 1;\r\n        this._resolve = undefined;\r\n        this._reject = undefined;\r\n        this._ref = ref;\r\n        this._blob = blob;\r\n        this._metadata = metadata;\r\n        this._mappings = getMappings();\r\n        this._resumable = this._shouldDoResumable(this._blob);\r\n        this._state = \"running\" /* InternalTaskState.RUNNING */;\r\n        this._errorHandler = error => {\r\n            this._request = undefined;\r\n            this._chunkMultiplier = 1;\r\n            if (error._codeEquals(StorageErrorCode.CANCELED)) {\r\n                this._needToFetchStatus = true;\r\n                this.completeTransitions_();\r\n            }\r\n            else {\r\n                const backoffExpired = this.isExponentialBackoffExpired();\r\n                if (isRetryStatusCode(error.status, [])) {\r\n                    if (backoffExpired) {\r\n                        error = retryLimitExceeded();\r\n                    }\r\n                    else {\r\n                        this.sleepTime = Math.max(this.sleepTime * 2, DEFAULT_MIN_SLEEP_TIME_MILLIS);\r\n                        this._needToFetchStatus = true;\r\n                        this.completeTransitions_();\r\n                        return;\r\n                    }\r\n                }\r\n                this._error = error;\r\n                this._transition(\"error\" /* InternalTaskState.ERROR */);\r\n            }\r\n        };\r\n        this._metadataErrorHandler = error => {\r\n            this._request = undefined;\r\n            if (error._codeEquals(StorageErrorCode.CANCELED)) {\r\n                this.completeTransitions_();\r\n            }\r\n            else {\r\n                this._error = error;\r\n                this._transition(\"error\" /* InternalTaskState.ERROR */);\r\n            }\r\n        };\r\n        this.sleepTime = 0;\r\n        this.maxSleepTime = this._ref.storage.maxUploadRetryTime;\r\n        this._promise = new Promise((resolve, reject) => {\r\n            this._resolve = resolve;\r\n            this._reject = reject;\r\n            this._start();\r\n        });\r\n        // Prevent uncaught rejections on the internal promise from bubbling out\r\n        // to the top level with a dummy handler.\r\n        this._promise.then(null, () => { });\r\n    }\r\n    isExponentialBackoffExpired() {\r\n        return this.sleepTime > this.maxSleepTime;\r\n    }\r\n    _makeProgressCallback() {\r\n        const sizeBefore = this._transferred;\r\n        return loaded => this._updateProgress(sizeBefore + loaded);\r\n    }\r\n    _shouldDoResumable(blob) {\r\n        return blob.size() > 256 * 1024;\r\n    }\r\n    _start() {\r\n        if (this._state !== \"running\" /* InternalTaskState.RUNNING */) {\r\n            // This can happen if someone pauses us in a resume callback, for example.\r\n            return;\r\n        }\r\n        if (this._request !== undefined) {\r\n            return;\r\n        }\r\n        if (this._resumable) {\r\n            if (this._uploadUrl === undefined) {\r\n                this._createResumable();\r\n            }\r\n            else {\r\n                if (this._needToFetchStatus) {\r\n                    this._fetchStatus();\r\n                }\r\n                else {\r\n                    if (this._needToFetchMetadata) {\r\n                        // Happens if we miss the metadata on upload completion.\r\n                        this._fetchMetadata();\r\n                    }\r\n                    else {\r\n                        this.pendingTimeout = setTimeout(() => {\r\n                            this.pendingTimeout = undefined;\r\n                            this._continueUpload();\r\n                        }, this.sleepTime);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            this._oneShotUpload();\r\n        }\r\n    }\r\n    _resolveToken(callback) {\r\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n        Promise.all([\r\n            this._ref.storage._getAuthToken(),\r\n            this._ref.storage._getAppCheckToken()\r\n        ]).then(([authToken, appCheckToken]) => {\r\n            switch (this._state) {\r\n                case \"running\" /* InternalTaskState.RUNNING */:\r\n                    callback(authToken, appCheckToken);\r\n                    break;\r\n                case \"canceling\" /* InternalTaskState.CANCELING */:\r\n                    this._transition(\"canceled\" /* InternalTaskState.CANCELED */);\r\n                    break;\r\n                case \"pausing\" /* InternalTaskState.PAUSING */:\r\n                    this._transition(\"paused\" /* InternalTaskState.PAUSED */);\r\n                    break;\r\n            }\r\n        });\r\n    }\r\n    // TODO(andysoto): assert false\r\n    _createResumable() {\r\n        this._resolveToken((authToken, appCheckToken) => {\r\n            const requestInfo = createResumableUpload(this._ref.storage, this._ref._location, this._mappings, this._blob, this._metadata);\r\n            const createRequest = this._ref.storage._makeRequest(requestInfo, newTextConnection, authToken, appCheckToken);\r\n            this._request = createRequest;\r\n            createRequest.getPromise().then((url) => {\r\n                this._request = undefined;\r\n                this._uploadUrl = url;\r\n                this._needToFetchStatus = false;\r\n                this.completeTransitions_();\r\n            }, this._errorHandler);\r\n        });\r\n    }\r\n    _fetchStatus() {\r\n        // TODO(andysoto): assert(this.uploadUrl_ !== null);\r\n        const url = this._uploadUrl;\r\n        this._resolveToken((authToken, appCheckToken) => {\r\n            const requestInfo = getResumableUploadStatus(this._ref.storage, this._ref._location, url, this._blob);\r\n            const statusRequest = this._ref.storage._makeRequest(requestInfo, newTextConnection, authToken, appCheckToken);\r\n            this._request = statusRequest;\r\n            statusRequest.getPromise().then(status => {\r\n                status = status;\r\n                this._request = undefined;\r\n                this._updateProgress(status.current);\r\n                this._needToFetchStatus = false;\r\n                if (status.finalized) {\r\n                    this._needToFetchMetadata = true;\r\n                }\r\n                this.completeTransitions_();\r\n            }, this._errorHandler);\r\n        });\r\n    }\r\n    _continueUpload() {\r\n        const chunkSize = RESUMABLE_UPLOAD_CHUNK_SIZE * this._chunkMultiplier;\r\n        const status = new ResumableUploadStatus(this._transferred, this._blob.size());\r\n        // TODO(andysoto): assert(this.uploadUrl_ !== null);\r\n        const url = this._uploadUrl;\r\n        this._resolveToken((authToken, appCheckToken) => {\r\n            let requestInfo;\r\n            try {\r\n                requestInfo = continueResumableUpload(this._ref._location, this._ref.storage, url, this._blob, chunkSize, this._mappings, status, this._makeProgressCallback());\r\n            }\r\n            catch (e) {\r\n                this._error = e;\r\n                this._transition(\"error\" /* InternalTaskState.ERROR */);\r\n                return;\r\n            }\r\n            const uploadRequest = this._ref.storage._makeRequest(requestInfo, newTextConnection, authToken, appCheckToken, \r\n            /*retry=*/ false // Upload requests should not be retried as each retry should be preceded by another query request. Which is handled in this file.\r\n            );\r\n            this._request = uploadRequest;\r\n            uploadRequest.getPromise().then((newStatus) => {\r\n                this._increaseMultiplier();\r\n                this._request = undefined;\r\n                this._updateProgress(newStatus.current);\r\n                if (newStatus.finalized) {\r\n                    this._metadata = newStatus.metadata;\r\n                    this._transition(\"success\" /* InternalTaskState.SUCCESS */);\r\n                }\r\n                else {\r\n                    this.completeTransitions_();\r\n                }\r\n            }, this._errorHandler);\r\n        });\r\n    }\r\n    _increaseMultiplier() {\r\n        const currentSize = RESUMABLE_UPLOAD_CHUNK_SIZE * this._chunkMultiplier;\r\n        // Max chunk size is 32M.\r\n        if (currentSize * 2 < 32 * 1024 * 1024) {\r\n            this._chunkMultiplier *= 2;\r\n        }\r\n    }\r\n    _fetchMetadata() {\r\n        this._resolveToken((authToken, appCheckToken) => {\r\n            const requestInfo = getMetadata$2(this._ref.storage, this._ref._location, this._mappings);\r\n            const metadataRequest = this._ref.storage._makeRequest(requestInfo, newTextConnection, authToken, appCheckToken);\r\n            this._request = metadataRequest;\r\n            metadataRequest.getPromise().then(metadata => {\r\n                this._request = undefined;\r\n                this._metadata = metadata;\r\n                this._transition(\"success\" /* InternalTaskState.SUCCESS */);\r\n            }, this._metadataErrorHandler);\r\n        });\r\n    }\r\n    _oneShotUpload() {\r\n        this._resolveToken((authToken, appCheckToken) => {\r\n            const requestInfo = multipartUpload(this._ref.storage, this._ref._location, this._mappings, this._blob, this._metadata);\r\n            const multipartRequest = this._ref.storage._makeRequest(requestInfo, newTextConnection, authToken, appCheckToken);\r\n            this._request = multipartRequest;\r\n            multipartRequest.getPromise().then(metadata => {\r\n                this._request = undefined;\r\n                this._metadata = metadata;\r\n                this._updateProgress(this._blob.size());\r\n                this._transition(\"success\" /* InternalTaskState.SUCCESS */);\r\n            }, this._errorHandler);\r\n        });\r\n    }\r\n    _updateProgress(transferred) {\r\n        const old = this._transferred;\r\n        this._transferred = transferred;\r\n        // A progress update can make the \"transferred\" value smaller (e.g. a\r\n        // partial upload not completed by server, after which the \"transferred\"\r\n        // value may reset to the value at the beginning of the request).\r\n        if (this._transferred !== old) {\r\n            this._notifyObservers();\r\n        }\r\n    }\r\n    _transition(state) {\r\n        if (this._state === state) {\r\n            return;\r\n        }\r\n        switch (state) {\r\n            case \"canceling\" /* InternalTaskState.CANCELING */:\r\n            case \"pausing\" /* InternalTaskState.PAUSING */:\r\n                // TODO(andysoto):\r\n                // assert(this.state_ === InternalTaskState.RUNNING ||\r\n                //        this.state_ === InternalTaskState.PAUSING);\r\n                this._state = state;\r\n                if (this._request !== undefined) {\r\n                    this._request.cancel();\r\n                }\r\n                else if (this.pendingTimeout) {\r\n                    clearTimeout(this.pendingTimeout);\r\n                    this.pendingTimeout = undefined;\r\n                    this.completeTransitions_();\r\n                }\r\n                break;\r\n            case \"running\" /* InternalTaskState.RUNNING */:\r\n                // TODO(andysoto):\r\n                // assert(this.state_ === InternalTaskState.PAUSED ||\r\n                //        this.state_ === InternalTaskState.PAUSING);\r\n                const wasPaused = this._state === \"paused\" /* InternalTaskState.PAUSED */;\r\n                this._state = state;\r\n                if (wasPaused) {\r\n                    this._notifyObservers();\r\n                    this._start();\r\n                }\r\n                break;\r\n            case \"paused\" /* InternalTaskState.PAUSED */:\r\n                // TODO(andysoto):\r\n                // assert(this.state_ === InternalTaskState.PAUSING);\r\n                this._state = state;\r\n                this._notifyObservers();\r\n                break;\r\n            case \"canceled\" /* InternalTaskState.CANCELED */:\r\n                // TODO(andysoto):\r\n                // assert(this.state_ === InternalTaskState.PAUSED ||\r\n                //        this.state_ === InternalTaskState.CANCELING);\r\n                this._error = canceled();\r\n                this._state = state;\r\n                this._notifyObservers();\r\n                break;\r\n            case \"error\" /* InternalTaskState.ERROR */:\r\n                // TODO(andysoto):\r\n                // assert(this.state_ === InternalTaskState.RUNNING ||\r\n                //        this.state_ === InternalTaskState.PAUSING ||\r\n                //        this.state_ === InternalTaskState.CANCELING);\r\n                this._state = state;\r\n                this._notifyObservers();\r\n                break;\r\n            case \"success\" /* InternalTaskState.SUCCESS */:\r\n                // TODO(andysoto):\r\n                // assert(this.state_ === InternalTaskState.RUNNING ||\r\n                //        this.state_ === InternalTaskState.PAUSING ||\r\n                //        this.state_ === InternalTaskState.CANCELING);\r\n                this._state = state;\r\n                this._notifyObservers();\r\n                break;\r\n        }\r\n    }\r\n    completeTransitions_() {\r\n        switch (this._state) {\r\n            case \"pausing\" /* InternalTaskState.PAUSING */:\r\n                this._transition(\"paused\" /* InternalTaskState.PAUSED */);\r\n                break;\r\n            case \"canceling\" /* InternalTaskState.CANCELING */:\r\n                this._transition(\"canceled\" /* InternalTaskState.CANCELED */);\r\n                break;\r\n            case \"running\" /* InternalTaskState.RUNNING */:\r\n                this._start();\r\n                break;\r\n        }\r\n    }\r\n    /**\r\n     * A snapshot of the current task state.\r\n     */\r\n    get snapshot() {\r\n        const externalState = taskStateFromInternalTaskState(this._state);\r\n        return {\r\n            bytesTransferred: this._transferred,\r\n            totalBytes: this._blob.size(),\r\n            state: externalState,\r\n            metadata: this._metadata,\r\n            task: this,\r\n            ref: this._ref\r\n        };\r\n    }\r\n    /**\r\n     * Adds a callback for an event.\r\n     * @param type - The type of event to listen for.\r\n     * @param nextOrObserver -\r\n     *     The `next` function, which gets called for each item in\r\n     *     the event stream, or an observer object with some or all of these three\r\n     *     properties (`next`, `error`, `complete`).\r\n     * @param error - A function that gets called with a `StorageError`\r\n     *     if the event stream ends due to an error.\r\n     * @param completed - A function that gets called if the\r\n     *     event stream ends normally.\r\n     * @returns\r\n     *     If only the event argument is passed, returns a function you can use to\r\n     *     add callbacks (see the examples above). If more than just the event\r\n     *     argument is passed, returns a function you can call to unregister the\r\n     *     callbacks.\r\n     */\r\n    on(type, nextOrObserver, error, completed) {\r\n        // Note: `type` isn't being used. Its type is also incorrect. TaskEvent should not be a string.\r\n        const observer = new Observer(nextOrObserver || undefined, error || undefined, completed || undefined);\r\n        this._addObserver(observer);\r\n        return () => {\r\n            this._removeObserver(observer);\r\n        };\r\n    }\r\n    /**\r\n     * This object behaves like a Promise, and resolves with its snapshot data\r\n     * when the upload completes.\r\n     * @param onFulfilled - The fulfillment callback. Promise chaining works as normal.\r\n     * @param onRejected - The rejection callback.\r\n     */\r\n    then(onFulfilled, onRejected) {\r\n        // These casts are needed so that TypeScript can infer the types of the\r\n        // resulting Promise.\r\n        return this._promise.then(onFulfilled, onRejected);\r\n    }\r\n    /**\r\n     * Equivalent to calling `then(null, onRejected)`.\r\n     */\r\n    catch(onRejected) {\r\n        return this.then(null, onRejected);\r\n    }\r\n    /**\r\n     * Adds the given observer.\r\n     */\r\n    _addObserver(observer) {\r\n        this._observers.push(observer);\r\n        this._notifyObserver(observer);\r\n    }\r\n    /**\r\n     * Removes the given observer.\r\n     */\r\n    _removeObserver(observer) {\r\n        const i = this._observers.indexOf(observer);\r\n        if (i !== -1) {\r\n            this._observers.splice(i, 1);\r\n        }\r\n    }\r\n    _notifyObservers() {\r\n        this._finishPromise();\r\n        const observers = this._observers.slice();\r\n        observers.forEach(observer => {\r\n            this._notifyObserver(observer);\r\n        });\r\n    }\r\n    _finishPromise() {\r\n        if (this._resolve !== undefined) {\r\n            let triggered = true;\r\n            switch (taskStateFromInternalTaskState(this._state)) {\r\n                case TaskState.SUCCESS:\r\n                    async(this._resolve.bind(null, this.snapshot))();\r\n                    break;\r\n                case TaskState.CANCELED:\r\n                case TaskState.ERROR:\r\n                    const toCall = this._reject;\r\n                    async(toCall.bind(null, this._error))();\r\n                    break;\r\n                default:\r\n                    triggered = false;\r\n                    break;\r\n            }\r\n            if (triggered) {\r\n                this._resolve = undefined;\r\n                this._reject = undefined;\r\n            }\r\n        }\r\n    }\r\n    _notifyObserver(observer) {\r\n        const externalState = taskStateFromInternalTaskState(this._state);\r\n        switch (externalState) {\r\n            case TaskState.RUNNING:\r\n            case TaskState.PAUSED:\r\n                if (observer.next) {\r\n                    async(observer.next.bind(observer, this.snapshot))();\r\n                }\r\n                break;\r\n            case TaskState.SUCCESS:\r\n                if (observer.complete) {\r\n                    async(observer.complete.bind(observer))();\r\n                }\r\n                break;\r\n            case TaskState.CANCELED:\r\n            case TaskState.ERROR:\r\n                if (observer.error) {\r\n                    async(observer.error.bind(observer, this._error))();\r\n                }\r\n                break;\r\n            default:\r\n                // TODO(andysoto): assert(false);\r\n                if (observer.error) {\r\n                    async(observer.error.bind(observer, this._error))();\r\n                }\r\n        }\r\n    }\r\n    /**\r\n     * Resumes a paused task. Has no effect on a currently running or failed task.\r\n     * @returns True if the operation took effect, false if ignored.\r\n     */\r\n    resume() {\r\n        const valid = this._state === \"paused\" /* InternalTaskState.PAUSED */ ||\r\n            this._state === \"pausing\" /* InternalTaskState.PAUSING */;\r\n        if (valid) {\r\n            this._transition(\"running\" /* InternalTaskState.RUNNING */);\r\n        }\r\n        return valid;\r\n    }\r\n    /**\r\n     * Pauses a currently running task. Has no effect on a paused or failed task.\r\n     * @returns True if the operation took effect, false if ignored.\r\n     */\r\n    pause() {\r\n        const valid = this._state === \"running\" /* InternalTaskState.RUNNING */;\r\n        if (valid) {\r\n            this._transition(\"pausing\" /* InternalTaskState.PAUSING */);\r\n        }\r\n        return valid;\r\n    }\r\n    /**\r\n     * Cancels a currently running or paused task. Has no effect on a complete or\r\n     * failed task.\r\n     * @returns True if the operation took effect, false if ignored.\r\n     */\r\n    cancel() {\r\n        const valid = this._state === \"running\" /* InternalTaskState.RUNNING */ ||\r\n            this._state === \"pausing\" /* InternalTaskState.PAUSING */;\r\n        if (valid) {\r\n            this._transition(\"canceling\" /* InternalTaskState.CANCELING */);\r\n        }\r\n        return valid;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Provides methods to interact with a bucket in the Firebase Storage service.\r\n * @internal\r\n * @param _location - An fbs.location, or the URL at\r\n *     which to base this object, in one of the following forms:\r\n *         gs://<bucket>/<object-path>\r\n *         http[s]://firebasestorage.googleapis.com/\r\n *                     <api-version>/b/<bucket>/o/<object-path>\r\n *     Any query or fragment strings will be ignored in the http[s]\r\n *     format. If no value is passed, the storage object will use a URL based on\r\n *     the project ID of the base firebase.App instance.\r\n */\r\nclass Reference {\r\n    constructor(_service, location) {\r\n        this._service = _service;\r\n        if (location instanceof Location) {\r\n            this._location = location;\r\n        }\r\n        else {\r\n            this._location = Location.makeFromUrl(location, _service.host);\r\n        }\r\n    }\r\n    /**\r\n     * Returns the URL for the bucket and path this object references,\r\n     *     in the form gs://<bucket>/<object-path>\r\n     * @override\r\n     */\r\n    toString() {\r\n        return 'gs://' + this._location.bucket + '/' + this._location.path;\r\n    }\r\n    _newRef(service, location) {\r\n        return new Reference(service, location);\r\n    }\r\n    /**\r\n     * A reference to the root of this object's bucket.\r\n     */\r\n    get root() {\r\n        const location = new Location(this._location.bucket, '');\r\n        return this._newRef(this._service, location);\r\n    }\r\n    /**\r\n     * The name of the bucket containing this reference's object.\r\n     */\r\n    get bucket() {\r\n        return this._location.bucket;\r\n    }\r\n    /**\r\n     * The full path of this object.\r\n     */\r\n    get fullPath() {\r\n        return this._location.path;\r\n    }\r\n    /**\r\n     * The short name of this object, which is the last component of the full path.\r\n     * For example, if fullPath is 'full/path/image.png', name is 'image.png'.\r\n     */\r\n    get name() {\r\n        return lastComponent(this._location.path);\r\n    }\r\n    /**\r\n     * The `StorageService` instance this `StorageReference` is associated with.\r\n     */\r\n    get storage() {\r\n        return this._service;\r\n    }\r\n    /**\r\n     * A `StorageReference` pointing to the parent location of this `StorageReference`, or null if\r\n     * this reference is the root.\r\n     */\r\n    get parent() {\r\n        const newPath = parent(this._location.path);\r\n        if (newPath === null) {\r\n            return null;\r\n        }\r\n        const location = new Location(this._location.bucket, newPath);\r\n        return new Reference(this._service, location);\r\n    }\r\n    /**\r\n     * Utility function to throw an error in methods that do not accept a root reference.\r\n     */\r\n    _throwIfRoot(name) {\r\n        if (this._location.path === '') {\r\n            throw invalidRootOperation(name);\r\n        }\r\n    }\r\n}\r\n/**\r\n * Download the bytes at the object's location.\r\n * @returns A Promise containing the downloaded bytes.\r\n */\r\nfunction getBytesInternal(ref, maxDownloadSizeBytes) {\r\n    ref._throwIfRoot('getBytes');\r\n    const requestInfo = getBytes$1(ref.storage, ref._location, maxDownloadSizeBytes);\r\n    return ref.storage\r\n        .makeRequestWithTokens(requestInfo, newBytesConnection)\r\n        .then(bytes => maxDownloadSizeBytes !== undefined\r\n        ? // GCS may not honor the Range header for small files\r\n            bytes.slice(0, maxDownloadSizeBytes)\r\n        : bytes);\r\n}\r\n/**\r\n * Download the bytes at the object's location.\r\n * @returns A Promise containing the downloaded blob.\r\n */\r\nfunction getBlobInternal(ref, maxDownloadSizeBytes) {\r\n    ref._throwIfRoot('getBlob');\r\n    const requestInfo = getBytes$1(ref.storage, ref._location, maxDownloadSizeBytes);\r\n    return ref.storage\r\n        .makeRequestWithTokens(requestInfo, newBlobConnection)\r\n        .then(blob => maxDownloadSizeBytes !== undefined\r\n        ? // GCS may not honor the Range header for small files\r\n            blob.slice(0, maxDownloadSizeBytes)\r\n        : blob);\r\n}\r\n/**\r\n * Uploads data to this object's location.\r\n * The upload is not resumable.\r\n *\r\n * @param ref - StorageReference where data should be uploaded.\r\n * @param data - The data to upload.\r\n * @param metadata - Metadata for the newly uploaded data.\r\n * @returns A Promise containing an UploadResult\r\n */\r\nfunction uploadBytes$1(ref, data, metadata) {\r\n    ref._throwIfRoot('uploadBytes');\r\n    const requestInfo = multipartUpload(ref.storage, ref._location, getMappings(), new FbsBlob(data, true), metadata);\r\n    return ref.storage\r\n        .makeRequestWithTokens(requestInfo, newTextConnection)\r\n        .then(finalMetadata => {\r\n        return {\r\n            metadata: finalMetadata,\r\n            ref\r\n        };\r\n    });\r\n}\r\n/**\r\n * Uploads data to this object's location.\r\n * The upload can be paused and resumed, and exposes progress updates.\r\n * @public\r\n * @param ref - StorageReference where data should be uploaded.\r\n * @param data - The data to upload.\r\n * @param metadata - Metadata for the newly uploaded data.\r\n * @returns An UploadTask\r\n */\r\nfunction uploadBytesResumable$1(ref, data, metadata) {\r\n    ref._throwIfRoot('uploadBytesResumable');\r\n    return new UploadTask(ref, new FbsBlob(data), metadata);\r\n}\r\n/**\r\n * Uploads a string to this object's location.\r\n * The upload is not resumable.\r\n * @public\r\n * @param ref - StorageReference where string should be uploaded.\r\n * @param value - The string to upload.\r\n * @param format - The format of the string to upload.\r\n * @param metadata - Metadata for the newly uploaded string.\r\n * @returns A Promise containing an UploadResult\r\n */\r\nfunction uploadString$1(ref, value, format = StringFormat.RAW, metadata) {\r\n    ref._throwIfRoot('uploadString');\r\n    const data = dataFromString(format, value);\r\n    const metadataClone = Object.assign({}, metadata);\r\n    if (metadataClone['contentType'] == null && data.contentType != null) {\r\n        metadataClone['contentType'] = data.contentType;\r\n    }\r\n    return uploadBytes$1(ref, data.data, metadataClone);\r\n}\r\n/**\r\n * List all items (files) and prefixes (folders) under this storage reference.\r\n *\r\n * This is a helper method for calling list() repeatedly until there are\r\n * no more results. The default pagination size is 1000.\r\n *\r\n * Note: The results may not be consistent if objects are changed while this\r\n * operation is running.\r\n *\r\n * Warning: listAll may potentially consume too many resources if there are\r\n * too many results.\r\n * @public\r\n * @param ref - StorageReference to get list from.\r\n *\r\n * @returns A Promise that resolves with all the items and prefixes under\r\n *      the current storage reference. `prefixes` contains references to\r\n *      sub-directories and `items` contains references to objects in this\r\n *      folder. `nextPageToken` is never returned.\r\n */\r\nfunction listAll$1(ref) {\r\n    const accumulator = {\r\n        prefixes: [],\r\n        items: []\r\n    };\r\n    return listAllHelper(ref, accumulator).then(() => accumulator);\r\n}\r\n/**\r\n * Separated from listAll because async functions can't use \"arguments\".\r\n * @param ref\r\n * @param accumulator\r\n * @param pageToken\r\n */\r\nasync function listAllHelper(ref, accumulator, pageToken) {\r\n    const opt = {\r\n        // maxResults is 1000 by default.\r\n        pageToken\r\n    };\r\n    const nextPage = await list$1(ref, opt);\r\n    accumulator.prefixes.push(...nextPage.prefixes);\r\n    accumulator.items.push(...nextPage.items);\r\n    if (nextPage.nextPageToken != null) {\r\n        await listAllHelper(ref, accumulator, nextPage.nextPageToken);\r\n    }\r\n}\r\n/**\r\n * List items (files) and prefixes (folders) under this storage reference.\r\n *\r\n * List API is only available for Firebase Rules Version 2.\r\n *\r\n * GCS is a key-blob store. Firebase Storage imposes the semantic of '/'\r\n * delimited folder structure.\r\n * Refer to GCS's List API if you want to learn more.\r\n *\r\n * To adhere to Firebase Rules's Semantics, Firebase Storage does not\r\n * support objects whose paths end with \"/\" or contain two consecutive\r\n * \"/\"s. Firebase Storage List API will filter these unsupported objects.\r\n * list() may fail if there are too many unsupported objects in the bucket.\r\n * @public\r\n *\r\n * @param ref - StorageReference to get list from.\r\n * @param options - See ListOptions for details.\r\n * @returns A Promise that resolves with the items and prefixes.\r\n *      `prefixes` contains references to sub-folders and `items`\r\n *      contains references to objects in this folder. `nextPageToken`\r\n *      can be used to get the rest of the results.\r\n */\r\nfunction list$1(ref, options) {\r\n    if (options != null) {\r\n        if (typeof options.maxResults === 'number') {\r\n            validateNumber('options.maxResults', \r\n            /* minValue= */ 1, \r\n            /* maxValue= */ 1000, options.maxResults);\r\n        }\r\n    }\r\n    const op = options || {};\r\n    const requestInfo = list$2(ref.storage, ref._location, \r\n    /*delimiter= */ '/', op.pageToken, op.maxResults);\r\n    return ref.storage.makeRequestWithTokens(requestInfo, newTextConnection);\r\n}\r\n/**\r\n * A `Promise` that resolves with the metadata for this object. If this\r\n * object doesn't exist or metadata cannot be retreived, the promise is\r\n * rejected.\r\n * @public\r\n * @param ref - StorageReference to get metadata from.\r\n */\r\nfunction getMetadata$1(ref) {\r\n    ref._throwIfRoot('getMetadata');\r\n    const requestInfo = getMetadata$2(ref.storage, ref._location, getMappings());\r\n    return ref.storage.makeRequestWithTokens(requestInfo, newTextConnection);\r\n}\r\n/**\r\n * Updates the metadata for this object.\r\n * @public\r\n * @param ref - StorageReference to update metadata for.\r\n * @param metadata - The new metadata for the object.\r\n *     Only values that have been explicitly set will be changed. Explicitly\r\n *     setting a value to null will remove the metadata.\r\n * @returns A `Promise` that resolves\r\n *     with the new metadata for this object.\r\n *     See `firebaseStorage.Reference.prototype.getMetadata`\r\n */\r\nfunction updateMetadata$1(ref, metadata) {\r\n    ref._throwIfRoot('updateMetadata');\r\n    const requestInfo = updateMetadata$2(ref.storage, ref._location, metadata, getMappings());\r\n    return ref.storage.makeRequestWithTokens(requestInfo, newTextConnection);\r\n}\r\n/**\r\n * Returns the download URL for the given Reference.\r\n * @public\r\n * @returns A `Promise` that resolves with the download\r\n *     URL for this object.\r\n */\r\nfunction getDownloadURL$1(ref) {\r\n    ref._throwIfRoot('getDownloadURL');\r\n    const requestInfo = getDownloadUrl(ref.storage, ref._location, getMappings());\r\n    return ref.storage\r\n        .makeRequestWithTokens(requestInfo, newTextConnection)\r\n        .then(url => {\r\n        if (url === null) {\r\n            throw noDownloadURL();\r\n        }\r\n        return url;\r\n    });\r\n}\r\n/**\r\n * Deletes the object at this location.\r\n * @public\r\n * @param ref - StorageReference for object to delete.\r\n * @returns A `Promise` that resolves if the deletion succeeds.\r\n */\r\nfunction deleteObject$1(ref) {\r\n    ref._throwIfRoot('deleteObject');\r\n    const requestInfo = deleteObject$2(ref.storage, ref._location);\r\n    return ref.storage.makeRequestWithTokens(requestInfo, newTextConnection);\r\n}\r\n/**\r\n * Returns reference for object obtained by appending `childPath` to `ref`.\r\n *\r\n * @param ref - StorageReference to get child of.\r\n * @param childPath - Child path from provided ref.\r\n * @returns A reference to the object obtained by\r\n * appending childPath, removing any duplicate, beginning, or trailing\r\n * slashes.\r\n *\r\n */\r\nfunction _getChild$1(ref, childPath) {\r\n    const newPath = child(ref._location.path, childPath);\r\n    const location = new Location(ref._location.bucket, newPath);\r\n    return new Reference(ref.storage, location);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction isUrl(path) {\r\n    return /^[A-Za-z]+:\\/\\//.test(path);\r\n}\r\n/**\r\n * Returns a firebaseStorage.Reference for the given url.\r\n */\r\nfunction refFromURL(service, url) {\r\n    return new Reference(service, url);\r\n}\r\n/**\r\n * Returns a firebaseStorage.Reference for the given path in the default\r\n * bucket.\r\n */\r\nfunction refFromPath(ref, path) {\r\n    if (ref instanceof FirebaseStorageImpl) {\r\n        const service = ref;\r\n        if (service._bucket == null) {\r\n            throw noDefaultBucket();\r\n        }\r\n        const reference = new Reference(service, service._bucket);\r\n        if (path != null) {\r\n            return refFromPath(reference, path);\r\n        }\r\n        else {\r\n            return reference;\r\n        }\r\n    }\r\n    else {\r\n        // ref is a Reference\r\n        if (path !== undefined) {\r\n            return _getChild$1(ref, path);\r\n        }\r\n        else {\r\n            return ref;\r\n        }\r\n    }\r\n}\r\nfunction ref$1(serviceOrRef, pathOrUrl) {\r\n    if (pathOrUrl && isUrl(pathOrUrl)) {\r\n        if (serviceOrRef instanceof FirebaseStorageImpl) {\r\n            return refFromURL(serviceOrRef, pathOrUrl);\r\n        }\r\n        else {\r\n            throw invalidArgument('To use ref(service, url), the first argument must be a Storage instance.');\r\n        }\r\n    }\r\n    else {\r\n        return refFromPath(serviceOrRef, pathOrUrl);\r\n    }\r\n}\r\nfunction extractBucket(host, config) {\r\n    const bucketString = config === null || config === void 0 ? void 0 : config[CONFIG_STORAGE_BUCKET_KEY];\r\n    if (bucketString == null) {\r\n        return null;\r\n    }\r\n    return Location.makeFromBucketSpec(bucketString, host);\r\n}\r\nfunction connectStorageEmulator$1(storage, host, port, options = {}) {\r\n    storage.host = `${host}:${port}`;\r\n    storage._protocol = 'http';\r\n    const { mockUserToken } = options;\r\n    if (mockUserToken) {\r\n        storage._overrideAuthToken =\r\n            typeof mockUserToken === 'string'\r\n                ? mockUserToken\r\n                : createMockUserToken(mockUserToken, storage.app.options.projectId);\r\n    }\r\n}\r\n/**\r\n * A service that provides Firebase Storage Reference instances.\r\n * @param opt_url - gs:// url to a custom Storage Bucket\r\n *\r\n * @internal\r\n */\r\nclass FirebaseStorageImpl {\r\n    constructor(\r\n    /**\r\n     * FirebaseApp associated with this StorageService instance.\r\n     */\r\n    app, _authProvider, \r\n    /**\r\n     * @internal\r\n     */\r\n    _appCheckProvider, \r\n    /**\r\n     * @internal\r\n     */\r\n    _url, _firebaseVersion) {\r\n        this.app = app;\r\n        this._authProvider = _authProvider;\r\n        this._appCheckProvider = _appCheckProvider;\r\n        this._url = _url;\r\n        this._firebaseVersion = _firebaseVersion;\r\n        this._bucket = null;\r\n        /**\r\n         * This string can be in the formats:\r\n         * - host\r\n         * - host:port\r\n         */\r\n        this._host = DEFAULT_HOST;\r\n        this._protocol = 'https';\r\n        this._appId = null;\r\n        this._deleted = false;\r\n        this._maxOperationRetryTime = DEFAULT_MAX_OPERATION_RETRY_TIME;\r\n        this._maxUploadRetryTime = DEFAULT_MAX_UPLOAD_RETRY_TIME;\r\n        this._requests = new Set();\r\n        if (_url != null) {\r\n            this._bucket = Location.makeFromBucketSpec(_url, this._host);\r\n        }\r\n        else {\r\n            this._bucket = extractBucket(this._host, this.app.options);\r\n        }\r\n    }\r\n    /**\r\n     * The host string for this service, in the form of `host` or\r\n     * `host:port`.\r\n     */\r\n    get host() {\r\n        return this._host;\r\n    }\r\n    set host(host) {\r\n        this._host = host;\r\n        if (this._url != null) {\r\n            this._bucket = Location.makeFromBucketSpec(this._url, host);\r\n        }\r\n        else {\r\n            this._bucket = extractBucket(host, this.app.options);\r\n        }\r\n    }\r\n    /**\r\n     * The maximum time to retry uploads in milliseconds.\r\n     */\r\n    get maxUploadRetryTime() {\r\n        return this._maxUploadRetryTime;\r\n    }\r\n    set maxUploadRetryTime(time) {\r\n        validateNumber('time', \r\n        /* minValue=*/ 0, \r\n        /* maxValue= */ Number.POSITIVE_INFINITY, time);\r\n        this._maxUploadRetryTime = time;\r\n    }\r\n    /**\r\n     * The maximum time to retry operations other than uploads or downloads in\r\n     * milliseconds.\r\n     */\r\n    get maxOperationRetryTime() {\r\n        return this._maxOperationRetryTime;\r\n    }\r\n    set maxOperationRetryTime(time) {\r\n        validateNumber('time', \r\n        /* minValue=*/ 0, \r\n        /* maxValue= */ Number.POSITIVE_INFINITY, time);\r\n        this._maxOperationRetryTime = time;\r\n    }\r\n    async _getAuthToken() {\r\n        if (this._overrideAuthToken) {\r\n            return this._overrideAuthToken;\r\n        }\r\n        const auth = this._authProvider.getImmediate({ optional: true });\r\n        if (auth) {\r\n            const tokenData = await auth.getToken();\r\n            if (tokenData !== null) {\r\n                return tokenData.accessToken;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    async _getAppCheckToken() {\r\n        const appCheck = this._appCheckProvider.getImmediate({ optional: true });\r\n        if (appCheck) {\r\n            const result = await appCheck.getToken();\r\n            // TODO: What do we want to do if there is an error getting the token?\r\n            // Context: appCheck.getToken() will never throw even if an error happened. In the error case, a dummy token will be\r\n            // returned along with an error field describing the error. In general, we shouldn't care about the error condition and just use\r\n            // the token (actual or dummy) to send requests.\r\n            return result.token;\r\n        }\r\n        return null;\r\n    }\r\n    /**\r\n     * Stop running requests and prevent more from being created.\r\n     */\r\n    _delete() {\r\n        if (!this._deleted) {\r\n            this._deleted = true;\r\n            this._requests.forEach(request => request.cancel());\r\n            this._requests.clear();\r\n        }\r\n        return Promise.resolve();\r\n    }\r\n    /**\r\n     * Returns a new firebaseStorage.Reference object referencing this StorageService\r\n     * at the given Location.\r\n     */\r\n    _makeStorageReference(loc) {\r\n        return new Reference(this, loc);\r\n    }\r\n    /**\r\n     * @param requestInfo - HTTP RequestInfo object\r\n     * @param authToken - Firebase auth token\r\n     */\r\n    _makeRequest(requestInfo, requestFactory, authToken, appCheckToken, retry = true) {\r\n        if (!this._deleted) {\r\n            const request = makeRequest(requestInfo, this._appId, authToken, appCheckToken, requestFactory, this._firebaseVersion, retry);\r\n            this._requests.add(request);\r\n            // Request removes itself from set when complete.\r\n            request.getPromise().then(() => this._requests.delete(request), () => this._requests.delete(request));\r\n            return request;\r\n        }\r\n        else {\r\n            return new FailRequest(appDeleted());\r\n        }\r\n    }\r\n    async makeRequestWithTokens(requestInfo, requestFactory) {\r\n        const [authToken, appCheckToken] = await Promise.all([\r\n            this._getAuthToken(),\r\n            this._getAppCheckToken()\r\n        ]);\r\n        return this._makeRequest(requestInfo, requestFactory, authToken, appCheckToken).getPromise();\r\n    }\r\n}\n\nconst name = \"@firebase/storage\";\nconst version = \"0.11.2\";\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Type constant for Firebase Storage.\r\n */\r\nconst STORAGE_TYPE = 'storage';\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Downloads the data at the object's location. Returns an error if the object\r\n * is not found.\r\n *\r\n * To use this functionality, you have to whitelist your app's origin in your\r\n * Cloud Storage bucket. See also\r\n * https://cloud.google.com/storage/docs/configuring-cors\r\n *\r\n * @public\r\n * @param ref - StorageReference where data should be downloaded.\r\n * @param maxDownloadSizeBytes - If set, the maximum allowed size in bytes to\r\n * retrieve.\r\n * @returns A Promise containing the object's bytes\r\n */\r\nfunction getBytes(ref, maxDownloadSizeBytes) {\r\n    ref = getModularInstance(ref);\r\n    return getBytesInternal(ref, maxDownloadSizeBytes);\r\n}\r\n/**\r\n * Uploads data to this object's location.\r\n * The upload is not resumable.\r\n * @public\r\n * @param ref - {@link StorageReference} where data should be uploaded.\r\n * @param data - The data to upload.\r\n * @param metadata - Metadata for the data to upload.\r\n * @returns A Promise containing an UploadResult\r\n */\r\nfunction uploadBytes(ref, data, metadata) {\r\n    ref = getModularInstance(ref);\r\n    return uploadBytes$1(ref, data, metadata);\r\n}\r\n/**\r\n * Uploads a string to this object's location.\r\n * The upload is not resumable.\r\n * @public\r\n * @param ref - {@link StorageReference} where string should be uploaded.\r\n * @param value - The string to upload.\r\n * @param format - The format of the string to upload.\r\n * @param metadata - Metadata for the string to upload.\r\n * @returns A Promise containing an UploadResult\r\n */\r\nfunction uploadString(ref, value, format, metadata) {\r\n    ref = getModularInstance(ref);\r\n    return uploadString$1(ref, value, format, metadata);\r\n}\r\n/**\r\n * Uploads data to this object's location.\r\n * The upload can be paused and resumed, and exposes progress updates.\r\n * @public\r\n * @param ref - {@link StorageReference} where data should be uploaded.\r\n * @param data - The data to upload.\r\n * @param metadata - Metadata for the data to upload.\r\n * @returns An UploadTask\r\n */\r\nfunction uploadBytesResumable(ref, data, metadata) {\r\n    ref = getModularInstance(ref);\r\n    return uploadBytesResumable$1(ref, data, metadata);\r\n}\r\n/**\r\n * A `Promise` that resolves with the metadata for this object. If this\r\n * object doesn't exist or metadata cannot be retreived, the promise is\r\n * rejected.\r\n * @public\r\n * @param ref - {@link StorageReference} to get metadata from.\r\n */\r\nfunction getMetadata(ref) {\r\n    ref = getModularInstance(ref);\r\n    return getMetadata$1(ref);\r\n}\r\n/**\r\n * Updates the metadata for this object.\r\n * @public\r\n * @param ref - {@link StorageReference} to update metadata for.\r\n * @param metadata - The new metadata for the object.\r\n *     Only values that have been explicitly set will be changed. Explicitly\r\n *     setting a value to null will remove the metadata.\r\n * @returns A `Promise` that resolves with the new metadata for this object.\r\n */\r\nfunction updateMetadata(ref, metadata) {\r\n    ref = getModularInstance(ref);\r\n    return updateMetadata$1(ref, metadata);\r\n}\r\n/**\r\n * List items (files) and prefixes (folders) under this storage reference.\r\n *\r\n * List API is only available for Firebase Rules Version 2.\r\n *\r\n * GCS is a key-blob store. Firebase Storage imposes the semantic of '/'\r\n * delimited folder structure.\r\n * Refer to GCS's List API if you want to learn more.\r\n *\r\n * To adhere to Firebase Rules's Semantics, Firebase Storage does not\r\n * support objects whose paths end with \"/\" or contain two consecutive\r\n * \"/\"s. Firebase Storage List API will filter these unsupported objects.\r\n * list() may fail if there are too many unsupported objects in the bucket.\r\n * @public\r\n *\r\n * @param ref - {@link StorageReference} to get list from.\r\n * @param options - See {@link ListOptions} for details.\r\n * @returns A `Promise` that resolves with the items and prefixes.\r\n *      `prefixes` contains references to sub-folders and `items`\r\n *      contains references to objects in this folder. `nextPageToken`\r\n *      can be used to get the rest of the results.\r\n */\r\nfunction list(ref, options) {\r\n    ref = getModularInstance(ref);\r\n    return list$1(ref, options);\r\n}\r\n/**\r\n * List all items (files) and prefixes (folders) under this storage reference.\r\n *\r\n * This is a helper method for calling list() repeatedly until there are\r\n * no more results. The default pagination size is 1000.\r\n *\r\n * Note: The results may not be consistent if objects are changed while this\r\n * operation is running.\r\n *\r\n * Warning: `listAll` may potentially consume too many resources if there are\r\n * too many results.\r\n * @public\r\n * @param ref - {@link StorageReference} to get list from.\r\n *\r\n * @returns A `Promise` that resolves with all the items and prefixes under\r\n *      the current storage reference. `prefixes` contains references to\r\n *      sub-directories and `items` contains references to objects in this\r\n *      folder. `nextPageToken` is never returned.\r\n */\r\nfunction listAll(ref) {\r\n    ref = getModularInstance(ref);\r\n    return listAll$1(ref);\r\n}\r\n/**\r\n * Returns the download URL for the given {@link StorageReference}.\r\n * @public\r\n * @param ref - {@link StorageReference} to get the download URL for.\r\n * @returns A `Promise` that resolves with the download\r\n *     URL for this object.\r\n */\r\nfunction getDownloadURL(ref) {\r\n    ref = getModularInstance(ref);\r\n    return getDownloadURL$1(ref);\r\n}\r\n/**\r\n * Deletes the object at this location.\r\n * @public\r\n * @param ref - {@link StorageReference} for object to delete.\r\n * @returns A `Promise` that resolves if the deletion succeeds.\r\n */\r\nfunction deleteObject(ref) {\r\n    ref = getModularInstance(ref);\r\n    return deleteObject$1(ref);\r\n}\r\nfunction ref(serviceOrRef, pathOrUrl) {\r\n    serviceOrRef = getModularInstance(serviceOrRef);\r\n    return ref$1(serviceOrRef, pathOrUrl);\r\n}\r\n/**\r\n * @internal\r\n */\r\nfunction _getChild(ref, childPath) {\r\n    return _getChild$1(ref, childPath);\r\n}\r\n/**\r\n * Gets a {@link FirebaseStorage} instance for the given Firebase app.\r\n * @public\r\n * @param app - Firebase app to get {@link FirebaseStorage} instance for.\r\n * @param bucketUrl - The gs:// url to your Firebase Storage Bucket.\r\n * If not passed, uses the app's default Storage Bucket.\r\n * @returns A {@link FirebaseStorage} instance.\r\n */\r\nfunction getStorage(app = getApp(), bucketUrl) {\r\n    app = getModularInstance(app);\r\n    const storageProvider = _getProvider(app, STORAGE_TYPE);\r\n    const storageInstance = storageProvider.getImmediate({\r\n        identifier: bucketUrl\r\n    });\r\n    const emulator = getDefaultEmulatorHostnameAndPort('storage');\r\n    if (emulator) {\r\n        connectStorageEmulator(storageInstance, ...emulator);\r\n    }\r\n    return storageInstance;\r\n}\r\n/**\r\n * Modify this {@link FirebaseStorage} instance to communicate with the Cloud Storage emulator.\r\n *\r\n * @param storage - The {@link FirebaseStorage} instance\r\n * @param host - The emulator host (ex: localhost)\r\n * @param port - The emulator port (ex: 5001)\r\n * @param options - Emulator options. `options.mockUserToken` is the mock auth\r\n * token to use for unit testing Security Rules.\r\n * @public\r\n */\r\nfunction connectStorageEmulator(storage, host, port, options = {}) {\r\n    connectStorageEmulator$1(storage, host, port, options);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Downloads the data at the object's location. Returns an error if the object\r\n * is not found.\r\n *\r\n * To use this functionality, you have to whitelist your app's origin in your\r\n * Cloud Storage bucket. See also\r\n * https://cloud.google.com/storage/docs/configuring-cors\r\n *\r\n * This API is not available in Node.\r\n *\r\n * @public\r\n * @param ref - StorageReference where data should be downloaded.\r\n * @param maxDownloadSizeBytes - If set, the maximum allowed size in bytes to\r\n * retrieve.\r\n * @returns A Promise that resolves with a Blob containing the object's bytes\r\n */\r\nfunction getBlob(ref, maxDownloadSizeBytes) {\r\n    ref = getModularInstance(ref);\r\n    return getBlobInternal(ref, maxDownloadSizeBytes);\r\n}\r\n/**\r\n * Downloads the data at the object's location. Raises an error event if the\r\n * object is not found.\r\n *\r\n * This API is only available in Node.\r\n *\r\n * @public\r\n * @param ref - StorageReference where data should be downloaded.\r\n * @param maxDownloadSizeBytes - If set, the maximum allowed size in bytes to\r\n * retrieve.\r\n * @returns A stream with the object's data as bytes\r\n */\r\nfunction getStream(ref, maxDownloadSizeBytes) {\r\n    throw new Error('getStream() is only supported by NodeJS builds');\r\n}\n\n/**\r\n * Cloud Storage for Firebase\r\n *\r\n * @packageDocumentation\r\n */\r\nfunction factory(container, { instanceIdentifier: url }) {\r\n    const app = container.getProvider('app').getImmediate();\r\n    const authProvider = container.getProvider('auth-internal');\r\n    const appCheckProvider = container.getProvider('app-check-internal');\r\n    return new FirebaseStorageImpl(app, authProvider, appCheckProvider, url, SDK_VERSION);\r\n}\r\nfunction registerStorage() {\r\n    _registerComponent(new Component(STORAGE_TYPE, factory, \"PUBLIC\" /* ComponentType.PUBLIC */).setMultipleInstances(true));\r\n    //RUNTIME_ENV will be replaced during the compilation to \"node\" for nodejs and an empty string for browser\r\n    registerVersion(name, version, '');\r\n    // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\r\n    registerVersion(name, version, 'esm2017');\r\n}\r\nregisterStorage();\n\nexport { StorageError, StorageErrorCode, StringFormat, FbsBlob as _FbsBlob, Location as _Location, TaskEvent as _TaskEvent, TaskState as _TaskState, UploadTask as _UploadTask, dataFromString as _dataFromString, _getChild, invalidArgument as _invalidArgument, invalidRootOperation as _invalidRootOperation, connectStorageEmulator, deleteObject, getBlob, getBytes, getDownloadURL, getMetadata, getStorage, getStream, list, listAll, ref, updateMetadata, uploadBytes, uploadBytesResumable, uploadString };\n//# sourceMappingURL=index.esm2017.js.map\n","\r\nexport const AppStorage = {\r\n    uploadContentImage: (name: string, data: any) => {\r\n        return new Promise<any>((resolve, reject) => {\r\n            // Create a child reference\r\n            const contentImagesRef = sref(storage(), `images/content/${name}.png`);\r\n            // imagesRef now points to 'images'\r\n            uploadString(contentImagesRef, data, 'data_url').then(async () => {\r\n                const url: any = await getDownloadURL(\r\n                    sref(storage(), `images/content/${name}.png`)\r\n                );\r\n                resolve(url);\r\n            }).catch(() => reject(false))\r\n        })\r\n    }\r\n}\r\n"],"names":["DEFAULT_HOST","CONFIG_STORAGE_BUCKET_KEY","DEFAULT_MAX_OPERATION_RETRY_TIME","DEFAULT_MAX_UPLOAD_RETRY_TIME","StorageError","FirebaseError","code","message","status_","prependCode","status","serverResponse","StorageErrorCode","unknown","objectNotFound","path","quotaExceeded","bucket","unauthenticated","unauthorizedApp","unauthorized","retryLimitExceeded","canceled","invalidUrl","url","invalidDefaultBucket","noDefaultBucket","cannotSliceBlob","noDownloadURL","missingPolyFill","polyFill","invalidArgument","appDeleted","invalidRootOperation","name","invalidFormat","format","internalError","Location","encode","bucketString","host","bucketLocation","location","bucketDomain","gsModify","loc","gsPath","gsRegex","gsIndices","httpModify","version","firebaseStorageHost","firebaseStoragePath","firebaseStorageRegExp","firebaseStorageIndices","cloudStorageHost","cloudStoragePath","cloudStorageRegExp","groups","i","group","captures","bucketValue","pathValue","FailRequest","error","_appDelete","start","doRequest","backoffCompleteCb","timeout","waitSeconds","retryTimeoutId","globalTimeoutId","hitTimeout","cancelState","triggeredCallback","triggerCallback","args","callWithDelay","millis","responseHandler","clearGlobalTimeout","success","waitMillis","stopped","stop","wasTimeout","id","isJustDef","p","isNonArrayObject","isString","isNativeBlob","isNativeBlobDefined","isNode","validateNumber","argument","minValue","maxValue","value","makeUrl","urlPart","protocol","origin","makeQueryString","params","queryPart","key","nextPart","ErrorCode","isRetryStatusCode","additionalRetryCodes","isFiveHundredCode","isExtraRetryCode","isAdditionalRetryCode","NetworkRequest","url_","method_","headers_","body_","successCodes_","additionalRetryCodes_","callback_","errorCallback_","timeout_","progressCallback_","connectionFactory_","retry","resolve","reject","doTheRequest","backoffCallback","RequestEndStatus","connection","progressListener","progressEvent","loaded","total","hitServer","wasCanceled","successCode","backoffDone","requestWentThrough","result","e","err","appDelete","wasSuccessCode","addAuthHeader_","headers","authToken","addVersionHeader_","firebaseVersion","addGmpidHeader_","appId","addAppCheckHeader_","appCheckToken","makeRequest","requestInfo","requestFactory","getBlobBuilder","getBlob$1","BlobBuilder","bb","sliceBlob","blob","end","decodeBase64","encoded","StringFormat","StringData","data","contentType","dataFromString","stringData","utf8Bytes_","base64Bytes_","dataURLBytes_","dataURLContentType_","b","c","hi","lo","percentEncodedBytes_","decoded","hasMinus","hasUnder","hasPlus","hasSlash","bytes","array","DataURLParts","dataURL","matches","middle","endsWith","dataUrl","parts","s","FbsBlob","elideCopy","size","blobType","startByte","endByte","realBlob","sliced","slice","blobby","val","uint8Arrays","finalLength","merged","index","jsonObjectOrNull","obj","parent","child","childPath","canonicalChildPath","component","lastComponent","noXform_","metadata","Mapping","server","local","writable","xform","mappings_","xformPath","fullPath","getMappings","mappings","mappingsXformPath","_metadata","nameMapping","xformSize","sizeMapping","addRef","service","generateRef","fromResource","resource","len","mapping","fromResourceString","resourceString","downloadUrlFromResourceString","tokens","token","base","queryString","toResourceString","RequestInfo","method","handler","handlerCheck","cndn","metadataHandler","xhr","text","downloadUrlHandler","sharedErrorHandler","errorHandler","newErr","objectErrorHandler","shared","getDownloadUrl","determineContentType_","metadataForUpload_","metadataClone","multipartUpload","genBoundary","str","boundary","metadata_","metadataString","preBlobPart","postBlobPart","body","urlParams","XhrConnection","header","listener","XhrTextConnection","newTextConnection","Reference","_service","newPath","uploadBytes$1","ref","finalMetadata","uploadString$1","getDownloadURL$1","_getChild$1","isUrl","refFromURL","refFromPath","FirebaseStorageImpl","reference","ref$1","serviceOrRef","pathOrUrl","extractBucket","config","connectStorageEmulator$1","storage","port","options","mockUserToken","createMockUserToken","app","_authProvider","_appCheckProvider","_url","_firebaseVersion","time","auth","tokenData","appCheck","request","STORAGE_TYPE","uploadString","getModularInstance","getDownloadURL","getStorage","getApp","bucketUrl","storageInstance","_getProvider","emulator","getDefaultEmulatorHostnameAndPort","connectStorageEmulator","factory","container","authProvider","appCheckProvider","SDK_VERSION","registerStorage","_registerComponent","Component","registerVersion","AppStorage","contentImagesRef","sref"],"mappings":"sHAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAsBA,MAAMA,EAAe,iCAIfC,GAA4B,gBAM5BC,GAAmC,EAAI,GAAK,IAM5CC,GAAgC,GAAK,GAAK,IAMhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAoBA,MAAMC,UAAqBC,EAAc,CAOrC,YAAYC,EAAMC,EAASC,EAAU,EAAG,CACpC,MAAMC,EAAYH,CAAI,EAAG,qBAAqBC,MAAYE,EAAYH,CAAI,IAAI,EAC9E,KAAK,QAAUE,EAIf,KAAK,WAAa,CAAE,eAAgB,IAAI,EACxC,KAAK,aAAe,KAAK,QAGzB,OAAO,eAAe,KAAMJ,EAAa,SAAS,CACrD,CACD,IAAI,QAAS,CACT,OAAO,KAAK,OACf,CACD,IAAI,OAAOM,EAAQ,CACf,KAAK,QAAUA,CAClB,CAID,YAAYJ,EAAM,CACd,OAAOG,EAAYH,CAAI,IAAM,KAAK,IACrC,CAID,IAAI,gBAAiB,CACjB,OAAO,KAAK,WAAW,cAC1B,CACD,IAAI,eAAeK,EAAgB,CAC/B,KAAK,WAAW,eAAiBA,EAC7B,KAAK,WAAW,eAChB,KAAK,QAAU,GAAG,KAAK;AAAA,EAAiB,KAAK,WAAW,iBAGxD,KAAK,QAAU,KAAK,YAE3B,CACL,CAKA,IAAIC,GACH,SAAUA,EAAkB,CAEzBA,EAAiB,QAAa,UAC9BA,EAAiB,iBAAsB,mBACvCA,EAAiB,iBAAsB,mBACvCA,EAAiB,kBAAuB,oBACxCA,EAAiB,eAAoB,iBACrCA,EAAiB,gBAAqB,kBACtCA,EAAiB,aAAkB,eACnCA,EAAiB,iBAAsB,mBACvCA,EAAiB,qBAA0B,uBAC3CA,EAAiB,iBAAsB,mBACvCA,EAAiB,SAAc,WAE/BA,EAAiB,mBAAwB,qBACzCA,EAAiB,YAAiB,cAClCA,EAAiB,uBAA4B,yBAC7CA,EAAiB,kBAAuB,oBACxCA,EAAiB,kBAAuB,oBACxCA,EAAiB,uBAA4B,yBAC7CA,EAAiB,gBAAqB,kBACtCA,EAAiB,iBAAsB,mBACvCA,EAAiB,uBAA4B,yBAC7CA,EAAiB,YAAiB,cAClCA,EAAiB,uBAA4B,yBAC7CA,EAAiB,eAAoB,iBACrCA,EAAiB,eAAoB,iBACrCA,EAAiB,wBAA6B,yBAClD,GAAGA,IAAqBA,EAAmB,CAAE,EAAC,EAC9C,SAASH,EAAYH,EAAM,CACvB,MAAO,WAAaA,CACxB,CACA,SAASO,GAAU,CACf,MAAMN,EAAU,iFAEhB,OAAO,IAAIH,EAAaQ,EAAiB,QAASL,CAAO,CAC7D,CACA,SAASO,GAAeC,EAAM,CAC1B,OAAO,IAAIX,EAAaQ,EAAiB,iBAAkB,WAAaG,EAAO,mBAAmB,CACtG,CACA,SAASC,GAAcC,EAAQ,CAC3B,OAAO,IAAIb,EAAaQ,EAAiB,eAAgB,qBACrDK,EACA,wEACuC,CAC/C,CACA,SAASC,IAAkB,CACvB,MAAMX,EAAU,8FAEhB,OAAO,IAAIH,EAAaQ,EAAiB,gBAAiBL,CAAO,CACrE,CACA,SAASY,IAAkB,CACvB,OAAO,IAAIf,EAAaQ,EAAiB,iBAAkB,+EAA+E,CAC9I,CACA,SAASQ,GAAaL,EAAM,CACxB,OAAO,IAAIX,EAAaQ,EAAiB,aAAc,4CAA8CG,EAAO,IAAI,CACpH,CACA,SAASM,IAAqB,CAC1B,OAAO,IAAIjB,EAAaQ,EAAiB,qBAAsB,0DAA0D,CAC7H,CACA,SAASU,IAAW,CAChB,OAAO,IAAIlB,EAAaQ,EAAiB,SAAU,oCAAoC,CAC3F,CACA,SAASW,GAAWC,EAAK,CACrB,OAAO,IAAIpB,EAAaQ,EAAiB,YAAa,gBAAkBY,EAAM,IAAI,CACtF,CACA,SAASC,GAAqBR,EAAQ,CAClC,OAAO,IAAIb,EAAaQ,EAAiB,uBAAwB,2BAA6BK,EAAS,IAAI,CAC/G,CACA,SAASS,IAAkB,CACvB,OAAO,IAAItB,EAAaQ,EAAiB,kBAAmB,6CAExDX,GACA,uCAAuC,CAC/C,CACA,SAAS0B,IAAkB,CACvB,OAAO,IAAIvB,EAAaQ,EAAiB,kBAAmB,wDAAwD,CACxH,CAIA,SAASgB,IAAgB,CACrB,OAAO,IAAIxB,EAAaQ,EAAiB,gBAAiB,iDAAiD,CAC/G,CACA,SAASiB,GAAgBC,EAAU,CAC/B,OAAO,IAAI1B,EAAaQ,EAAiB,wBAAyB,GAAGkB,yJAAgK,CACzO,CAIA,SAASC,EAAgBxB,EAAS,CAC9B,OAAO,IAAIH,EAAaQ,EAAiB,iBAAkBL,CAAO,CACtE,CACA,SAASyB,IAAa,CAClB,OAAO,IAAI5B,EAAaQ,EAAiB,YAAa,+BAA+B,CACzF,CAMA,SAASqB,GAAqBC,EAAM,CAChC,OAAO,IAAI9B,EAAaQ,EAAiB,uBAAwB,kBAC7DsB,EACA,iHACoD,CAC5D,CAKA,SAASC,EAAcC,EAAQ7B,EAAS,CACpC,OAAO,IAAIH,EAAaQ,EAAiB,eAAgB,iCAAmCwB,EAAS,MAAQ7B,CAAO,CACxH,CAIA,SAAS8B,EAAc9B,EAAS,CAC5B,MAAM,IAAIH,EAAaQ,EAAiB,eAAgB,mBAAqBL,CAAO,CACxF,CAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAqBA,MAAM+B,CAAS,CACX,YAAYrB,EAAQF,EAAM,CACtB,KAAK,OAASE,EACd,KAAK,MAAQF,CAChB,CACD,IAAI,MAAO,CACP,OAAO,KAAK,KACf,CACD,IAAI,QAAS,CACT,OAAO,KAAK,KAAK,SAAW,CAC/B,CACD,eAAgB,CACZ,MAAMwB,EAAS,mBACf,MAAO,MAAQA,EAAO,KAAK,MAAM,EAAI,MAAQA,EAAO,KAAK,IAAI,CAChE,CACD,qBAAsB,CAElB,MAAO,MADQ,mBACO,KAAK,MAAM,EAAI,IACxC,CACD,OAAO,mBAAmBC,EAAcC,EAAM,CAC1C,IAAIC,EACJ,GAAI,CACAA,EAAiBJ,EAAS,YAAYE,EAAcC,CAAI,CAC3D,MACD,CAGI,OAAO,IAAIH,EAASE,EAAc,EAAE,CACvC,CACD,GAAIE,EAAe,OAAS,GACxB,OAAOA,EAGP,MAAMjB,GAAqBe,CAAY,CAE9C,CACD,OAAO,YAAYhB,EAAKiB,EAAM,CAC1B,IAAIE,EAAW,KACf,MAAMC,EAAe,sBACrB,SAASC,EAASC,EAAK,CACfA,EAAI,KAAK,OAAOA,EAAI,KAAK,OAAS,CAAC,IAAM,MACzCA,EAAI,MAAQA,EAAI,MAAM,MAAM,EAAG,EAAE,EAExC,CACD,MAAMC,EAAS,YACTC,EAAU,IAAI,OAAO,SAAWJ,EAAeG,EAAQ,GAAG,EAC1DE,EAAY,CAAE,OAAQ,EAAG,KAAM,CAAC,EACtC,SAASC,EAAWJ,EAAK,CACrBA,EAAI,MAAQ,mBAAmBA,EAAI,IAAI,CAC1C,CACD,MAAMK,EAAU,iBACVC,EAAsBX,EAAK,QAAQ,OAAQ,KAAK,EAChDY,EAAsB,kBACtBC,EAAwB,IAAI,OAAO,aAAaF,KAAuBD,OAAaP,MAAiBS,IAAuB,GAAG,EAC/HE,EAAyB,CAAE,OAAQ,EAAG,KAAM,CAAC,EAC7CC,EAAmBf,IAASzC,EAC5B,sDACAyC,EACAgB,EAAmB,WACnBC,EAAqB,IAAI,OAAO,aAAaF,KAAoBZ,KAAgBa,IAAoB,GAAG,EAExGE,EAAS,CACX,CAAE,MAAOX,EAAS,QAASC,EAAW,WAAYJ,CAAU,EAC5D,CACI,MAAOS,EACP,QAASC,EACT,WAAYL,CACf,EACD,CACI,MAAOQ,EACP,QAVoB,CAAE,OAAQ,EAAG,KAAM,CAAC,EAWxC,WAAYR,CACf,CACb,EACQ,QAASU,EAAI,EAAGA,EAAID,EAAO,OAAQC,IAAK,CACpC,MAAMC,EAAQF,EAAOC,CAAC,EAChBE,EAAWD,EAAM,MAAM,KAAKrC,CAAG,EACrC,GAAIsC,EAAU,CACV,MAAMC,GAAcD,EAASD,EAAM,QAAQ,MAAM,EACjD,IAAIG,EAAYF,EAASD,EAAM,QAAQ,IAAI,EACtCG,IACDA,EAAY,IAEhBrB,EAAW,IAAIL,EAASyB,GAAaC,CAAS,EAC9CH,EAAM,WAAWlB,CAAQ,EACzB,OAGR,GAAIA,GAAY,KACZ,MAAMpB,GAAWC,CAAG,EAExB,OAAOmB,CACV,CACL,CAKA,MAAMsB,EAAY,CACd,YAAYC,EAAO,CACf,KAAK,SAAW,QAAQ,OAAOA,CAAK,CACvC,CAED,YAAa,CACT,OAAO,KAAK,QACf,CAED,OAAOC,EAAa,GAAO,CAAG,CAClC,CAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GA4BA,SAASC,GAAMC,EAEfC,EAAmBC,EAAS,CAGxB,IAAIC,EAAc,EAIdC,EAAiB,KAEjBC,EAAkB,KAClBC,EAAa,GACbC,EAAc,EAClB,SAAStD,GAAW,CAChB,OAAOsD,IAAgB,CAC1B,CACD,IAAIC,EAAoB,GACxB,SAASC,KAAmBC,EAAM,CACzBF,IACDA,EAAoB,GACpBP,EAAkB,MAAM,KAAMS,CAAI,EAEzC,CACD,SAASC,EAAcC,EAAQ,CAC3BR,EAAiB,WAAW,IAAM,CAC9BA,EAAiB,KACjBJ,EAAUa,EAAiB5D,EAAQ,CAAE,CACxC,EAAE2D,CAAM,CACZ,CACD,SAASE,GAAqB,CACtBT,GACA,aAAaA,CAAe,CAEnC,CACD,SAASQ,EAAgBE,KAAYL,EAAM,CACvC,GAAIF,EAAmB,CACnBM,IACA,OAEJ,GAAIC,EAAS,CACTD,IACAL,EAAgB,KAAK,KAAMM,EAAS,GAAGL,CAAI,EAC3C,OAGJ,GADiBzD,EAAU,GAAIqD,EACjB,CACVQ,IACAL,EAAgB,KAAK,KAAMM,EAAS,GAAGL,CAAI,EAC3C,OAEAP,EAAc,KAEdA,GAAe,GAEnB,IAAIa,EACAT,IAAgB,GAChBA,EAAc,EACdS,EAAa,GAGbA,GAAcb,EAAc,KAAK,OAAM,GAAM,IAEjDQ,EAAcK,CAAU,CAC3B,CACD,IAAIC,EAAU,GACd,SAASC,EAAKC,EAAY,CAClBF,IAGJA,EAAU,GACVH,IACI,CAAAN,IAGAJ,IAAmB,MACde,IACDZ,EAAc,GAElB,aAAaH,CAAc,EAC3BO,EAAc,CAAC,GAGVQ,IACDZ,EAAc,IAGzB,CACD,OAAAI,EAAc,CAAC,EACfN,EAAkB,WAAW,IAAM,CAC/BC,EAAa,GACbY,EAAK,EAAI,CACZ,EAAEhB,CAAO,EACHgB,CACX,CAQA,SAASA,GAAKE,EAAI,CACdA,EAAG,EAAK,CACZ,CAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAgBA,SAASC,GAAUC,EAAG,CAClB,OAAOA,IAAM,MACjB,CAKA,SAASC,GAAiBD,EAAG,CACzB,OAAO,OAAOA,GAAM,UAAY,CAAC,MAAM,QAAQA,CAAC,CACpD,CACA,SAASE,EAASF,EAAG,CACjB,OAAO,OAAOA,GAAM,UAAYA,aAAa,MACjD,CACA,SAASG,EAAaH,EAAG,CACrB,OAAOI,EAAmB,GAAMJ,aAAa,IACjD,CACA,SAASI,GAAsB,CAG3B,OAAO,OAAO,KAAS,KAAe,CAACC,GAAM,CACjD,CACA,SAASC,EAAeC,EAAUC,EAAUC,EAAUC,EAAO,CACzD,GAAIA,EAAQF,EACR,MAAMpE,EAAgB,sBAAsBmE,gBAAuBC,eAAsB,EAE7F,GAAIE,EAAQD,EACR,MAAMrE,EAAgB,sBAAsBmE,gBAAuBE,YAAmB,CAE9F,CAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAgBA,SAASE,EAAQC,EAAS9D,EAAM+D,EAAU,CACtC,IAAIC,EAAShE,EACb,OAAI+D,GAAY,OACZC,EAAS,WAAWhE,KAEjB,GAAG+D,OAAcC,OAAYF,GACxC,CACA,SAASG,GAAgBC,EAAQ,CAC7B,MAAMpE,EAAS,mBACf,IAAIqE,EAAY,IAChB,UAAWC,KAAOF,EACd,GAAIA,EAAO,eAAeE,CAAG,EAAG,CAC5B,MAAMC,EAAWvE,EAAOsE,CAAG,EAAI,IAAMtE,EAAOoE,EAAOE,CAAG,CAAC,EACvDD,EAAYA,EAAYE,EAAW,IAI3C,OAAAF,EAAYA,EAAU,MAAM,EAAG,EAAE,EAC1BA,CACX,CAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAmBA,IAAIG,GACH,SAAUA,EAAW,CAClBA,EAAUA,EAAU,SAAc,CAAC,EAAI,WACvCA,EAAUA,EAAU,cAAmB,CAAC,EAAI,gBAC5CA,EAAUA,EAAU,MAAW,CAAC,EAAI,OACxC,GAAGA,IAAcA,EAAY,CAAE,EAAC,EAEhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAsBA,SAASC,GAAkBtG,EAAQuG,EAAsB,CAGrD,MAAMC,EAAoBxG,GAAU,KAAOA,EAAS,IAO9CyG,EANkB,CAEpB,IAEA,GACR,EAC6C,QAAQzG,CAAM,IAAM,GACvD0G,EAAwBH,EAAqB,QAAQvG,CAAM,IAAM,GACvE,OAAOwG,GAAqBC,GAAoBC,CACpD,CAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAwBA,MAAMC,EAAe,CACjB,YAAYC,EAAMC,EAASC,EAAUC,EAAOC,EAAeC,EAAuBC,EAAWC,EAAgBC,EAAUC,EAAmBC,EAAoBC,EAAQ,GAAM,CACxK,KAAK,KAAOX,EACZ,KAAK,QAAUC,EACf,KAAK,SAAWC,EAChB,KAAK,MAAQC,EACb,KAAK,cAAgBC,EACrB,KAAK,sBAAwBC,EAC7B,KAAK,UAAYC,EACjB,KAAK,eAAiBC,EACtB,KAAK,SAAWC,EAChB,KAAK,kBAAoBC,EACzB,KAAK,mBAAqBC,EAC1B,KAAK,MAAQC,EACb,KAAK,mBAAqB,KAC1B,KAAK,WAAa,KAClB,KAAK,UAAY,GACjB,KAAK,WAAa,GAClB,KAAK,SAAW,IAAI,QAAQ,CAACC,EAASC,IAAW,CAC7C,KAAK,SAAWD,EAChB,KAAK,QAAUC,EACf,KAAK,OAAM,CACvB,CAAS,CACJ,CAID,QAAS,CACL,MAAMC,EAAe,CAACC,EAAiB/G,IAAa,CAChD,GAAIA,EAAU,CACV+G,EAAgB,GAAO,IAAIC,EAAiB,GAAO,KAAM,EAAI,CAAC,EAC9D,OAEJ,MAAMC,EAAa,KAAK,qBACxB,KAAK,mBAAqBA,EAC1B,MAAMC,EAAmBC,GAAiB,CACtC,MAAMC,EAASD,EAAc,OACvBE,EAAQF,EAAc,iBAAmBA,EAAc,MAAQ,GACjE,KAAK,oBAAsB,MAC3B,KAAK,kBAAkBC,EAAQC,CAAK,CAExD,EACgB,KAAK,oBAAsB,MAC3BJ,EAAW,0BAA0BC,CAAgB,EAIzDD,EACK,KAAK,KAAK,KAAM,KAAK,QAAS,KAAK,MAAO,KAAK,QAAQ,EACvD,KAAK,IAAM,CACR,KAAK,oBAAsB,MAC3BA,EAAW,6BAA6BC,CAAgB,EAE5D,KAAK,mBAAqB,KAC1B,MAAMI,EAAYL,EAAW,aAAY,IAAOxB,EAAU,SACpDrG,EAAS6H,EAAW,YAC1B,GAAI,CAACK,GACA5B,GAAkBtG,EAAQ,KAAK,qBAAqB,GACjD,KAAK,MAAQ,CACjB,MAAMmI,EAAcN,EAAW,aAAY,IAAOxB,EAAU,MAC5DsB,EAAgB,GAAO,IAAIC,EAAiB,GAAO,KAAMO,CAAW,CAAC,EACrE,OAEJ,MAAMC,EAAc,KAAK,cAAc,QAAQpI,CAAM,IAAM,GAC3D2H,EAAgB,GAAM,IAAIC,EAAiBQ,EAAaP,CAAU,CAAC,CACnF,CAAa,CACb,EAKcQ,EAAc,CAACC,EAAoBtI,IAAW,CAChD,MAAMwH,EAAU,KAAK,SACfC,EAAS,KAAK,QACdI,EAAa7H,EAAO,WAC1B,GAAIA,EAAO,eACP,GAAI,CACA,MAAMuI,EAAS,KAAK,UAAUV,EAAYA,EAAW,YAAW,CAAE,EAC9D7C,GAAUuD,CAAM,EAChBf,EAAQe,CAAM,EAGdf,GAEP,OACMgB,EAAP,CACIf,EAAOe,CAAC,CACX,SAGGX,IAAe,KAAM,CACrB,MAAMY,EAAMtI,IACZsI,EAAI,eAAiBZ,EAAW,eAC5B,KAAK,eACLJ,EAAO,KAAK,eAAeI,EAAYY,CAAG,CAAC,EAG3ChB,EAAOgB,CAAG,UAIVzI,EAAO,SAAU,CACjB,MAAMyI,EAAM,KAAK,WAAanH,GAAY,EAAGV,GAAQ,EACrD6G,EAAOgB,CAAG,MAET,CACD,MAAMA,EAAM9H,KACZ8G,EAAOgB,CAAG,EAIlC,EACY,KAAK,UACLJ,EAAY,GAAO,IAAIT,EAAiB,GAAO,KAAM,EAAI,CAAC,EAG1D,KAAK,WAAalE,GAAMgE,EAAcW,EAAa,KAAK,QAAQ,CAEvE,CAED,YAAa,CACT,OAAO,KAAK,QACf,CAED,OAAOK,EAAW,CACd,KAAK,UAAY,GACjB,KAAK,WAAaA,GAAa,GAC3B,KAAK,aAAe,MACpB7D,GAAK,KAAK,UAAU,EAEpB,KAAK,qBAAuB,MAC5B,KAAK,mBAAmB,OAE/B,CACL,CAKA,MAAM+C,CAAiB,CACnB,YAAYe,EAAgBd,EAAYjH,EAAU,CAC9C,KAAK,eAAiB+H,EACtB,KAAK,WAAad,EAClB,KAAK,SAAW,CAAC,CAACjH,CACrB,CACL,CACA,SAASgI,GAAeC,EAASC,EAAW,CACpCA,IAAc,MAAQA,EAAU,OAAS,IACzCD,EAAQ,cAAmB,YAAcC,EAEjD,CACA,SAASC,GAAkBF,EAASG,EAAiB,CACjDH,EAAQ,4BAA4B,EAChC,UAAYG,GAA2E,aAC/F,CACA,SAASC,GAAgBJ,EAASK,EAAO,CACjCA,IACAL,EAAQ,kBAAkB,EAAIK,EAEtC,CACA,SAASC,GAAmBN,EAASO,EAAe,CAC5CA,IAAkB,OAClBP,EAAQ,qBAAqB,EAAIO,EAEzC,CACA,SAASC,GAAYC,EAAaJ,EAAOJ,EAAWM,EAAeG,EAAgBP,EAAiBzB,EAAQ,GAAM,CAC9G,MAAMrB,EAAYF,GAAgBsD,EAAY,SAAS,EACjDxI,EAAMwI,EAAY,IAAMpD,EACxB2C,EAAU,OAAO,OAAO,CAAA,EAAIS,EAAY,OAAO,EACrD,OAAAL,GAAgBJ,EAASK,CAAK,EAC9BN,GAAeC,EAASC,CAAS,EACjCC,GAAkBF,EAASG,CAAe,EAC1CG,GAAmBN,EAASO,CAAa,EAClC,IAAIzC,GAAe7F,EAAKwI,EAAY,OAAQT,EAASS,EAAY,KAAMA,EAAY,aAAcA,EAAY,qBAAsBA,EAAY,QAASA,EAAY,aAAcA,EAAY,QAASA,EAAY,iBAAkBC,EAAgBhC,CAAK,CACrQ,CAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAgBA,SAASiC,IAAiB,CACtB,OAAI,OAAO,YAAgB,IAChB,YAEF,OAAO,kBAAsB,IAC3B,kBAGP,MAER,CAOA,SAASC,MAAapF,EAAM,CACxB,MAAMqF,EAAcF,KACpB,GAAIE,IAAgB,OAAW,CAC3B,MAAMC,EAAK,IAAID,EACf,QAASxG,EAAI,EAAGA,EAAImB,EAAK,OAAQnB,IAC7ByG,EAAG,OAAOtF,EAAKnB,CAAC,CAAC,EAErB,OAAOyG,EAAG,cAET,CACD,GAAItE,EAAmB,EACnB,OAAO,IAAI,KAAKhB,CAAI,EAGpB,MAAM,IAAI3E,EAAaQ,EAAiB,wBAAyB,qDAAqD,EAGlI,CAUA,SAAS0J,GAAUC,EAAMnG,EAAOoG,EAAK,CACjC,OAAID,EAAK,YACEA,EAAK,YAAYnG,EAAOoG,CAAG,EAE7BD,EAAK,SACHA,EAAK,SAASnG,EAAOoG,CAAG,EAE1BD,EAAK,MACHA,EAAK,MAAMnG,EAAOoG,CAAG,EAEzB,IACX,CAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAiBA,SAASC,GAAaC,EAAS,CAC3B,GAAI,OAAO,KAAS,IAChB,MAAM7I,GAAgB,SAAS,EAEnC,OAAO,KAAK6I,CAAO,CACvB,CAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAoBA,MAAMC,EAAe,CAQjB,IAAK,MAOL,OAAQ,SAOR,UAAW,YAUX,SAAU,UACd,EACA,MAAMC,CAAW,CACb,YAAYC,EAAMC,EAAa,CAC3B,KAAK,KAAOD,EACZ,KAAK,YAAcC,GAAe,IACrC,CACL,CAIA,SAASC,GAAe3I,EAAQ4I,EAAY,CACxC,OAAQ5I,EAAM,CACV,KAAKuI,EAAa,IACd,OAAO,IAAIC,EAAWK,GAAWD,CAAU,CAAC,EAChD,KAAKL,EAAa,OAClB,KAAKA,EAAa,UACd,OAAO,IAAIC,EAAWM,GAAa9I,EAAQ4I,CAAU,CAAC,EAC1D,KAAKL,EAAa,SACd,OAAO,IAAIC,EAAWO,GAAcH,CAAU,EAAGI,GAAoBJ,CAAU,CAAC,CAEvF,CAED,MAAMnK,EAAO,CACjB,CACA,SAASoK,GAAW5E,EAAO,CACvB,MAAMgF,EAAI,CAAA,EACV,QAASzH,EAAI,EAAGA,EAAIyC,EAAM,OAAQzC,IAAK,CACnC,IAAI0H,EAAIjF,EAAM,WAAWzC,CAAC,EAC1B,GAAI0H,GAAK,IACLD,EAAE,KAAKC,CAAC,UAGJA,GAAK,KACLD,EAAE,KAAK,IAAOC,GAAK,EAAI,IAAOA,EAAI,EAAG,WAGhCA,EAAI,SAAW,MAGhB,GAAI,EADU1H,EAAIyC,EAAM,OAAS,IAAMA,EAAM,WAAWzC,EAAI,CAAC,EAAI,SAAW,OAGxEyH,EAAE,KAAK,IAAK,IAAK,GAAG,MAEnB,CACD,MAAME,EAAKD,EACLE,EAAKnF,EAAM,WAAW,EAAEzC,CAAC,EAC/B0H,EAAI,OAAUC,EAAK,OAAS,GAAOC,EAAK,KACxCH,EAAE,KAAK,IAAOC,GAAK,GAAK,IAAQA,GAAK,GAAM,GAAK,IAAQA,GAAK,EAAK,GAAK,IAAOA,EAAI,EAAG,OAIpFA,EAAI,SAAW,MAEhBD,EAAE,KAAK,IAAK,IAAK,GAAG,EAGpBA,EAAE,KAAK,IAAOC,GAAK,GAAK,IAAQA,GAAK,EAAK,GAAK,IAAOA,EAAI,EAAG,EAMjF,OAAO,IAAI,WAAWD,CAAC,CAC3B,CACA,SAASI,GAAqBpF,EAAO,CACjC,IAAIqF,EACJ,GAAI,CACAA,EAAU,mBAAmBrF,CAAK,CACrC,MACD,CACI,MAAMlE,EAAcwI,EAAa,SAAU,qBAAqB,CACnE,CACD,OAAOM,GAAWS,CAAO,CAC7B,CACA,SAASR,GAAa9I,EAAQiE,EAAO,CACjC,OAAQjE,EAAM,CACV,KAAKuI,EAAa,OAAQ,CACtB,MAAMgB,EAAWtF,EAAM,QAAQ,GAAG,IAAM,GAClCuF,EAAWvF,EAAM,QAAQ,GAAG,IAAM,GACxC,GAAIsF,GAAYC,EAEZ,MAAMzJ,EAAcC,EAAQ,uBADRuJ,EAAW,IAAM,KAGjC,mCAAmC,EAE3C,KACH,CACD,KAAKhB,EAAa,UAAW,CACzB,MAAMkB,EAAUxF,EAAM,QAAQ,GAAG,IAAM,GACjCyF,EAAWzF,EAAM,QAAQ,GAAG,IAAM,GACxC,GAAIwF,GAAWC,EAEX,MAAM3J,EAAcC,EAAQ,uBADRyJ,EAAU,IAAM,KAC8B,gCAAgC,EAEtGxF,EAAQA,EAAM,QAAQ,KAAM,GAAG,EAAE,QAAQ,KAAM,GAAG,EAClD,KACH,CAEJ,CACD,IAAI0F,EACJ,GAAI,CACAA,EAAQtB,GAAapE,CAAK,CAC7B,OACM6C,EAAP,CACI,MAAIA,EAAE,QAAQ,SAAS,UAAU,EACvBA,EAEJ/G,EAAcC,EAAQ,yBAAyB,CACxD,CACD,MAAM4J,EAAQ,IAAI,WAAWD,EAAM,MAAM,EACzC,QAASnI,EAAI,EAAGA,EAAImI,EAAM,OAAQnI,IAC9BoI,EAAMpI,CAAC,EAAImI,EAAM,WAAWnI,CAAC,EAEjC,OAAOoI,CACX,CACA,MAAMC,EAAa,CACf,YAAYC,EAAS,CACjB,KAAK,OAAS,GACd,KAAK,YAAc,KACnB,MAAMC,EAAUD,EAAQ,MAAM,iBAAiB,EAC/C,GAAIC,IAAY,KACZ,MAAMhK,EAAcwI,EAAa,SAAU,uDAAuD,EAEtG,MAAMyB,EAASD,EAAQ,CAAC,GAAK,KACzBC,GAAU,OACV,KAAK,OAASC,GAASD,EAAQ,SAAS,EACxC,KAAK,YAAc,KAAK,OAClBA,EAAO,UAAU,EAAGA,EAAO,OAAS,CAAgB,EACpDA,GAEV,KAAK,KAAOF,EAAQ,UAAUA,EAAQ,QAAQ,GAAG,EAAI,CAAC,CACzD,CACL,CACA,SAASf,GAAcmB,EAAS,CAC5B,MAAMC,EAAQ,IAAIN,GAAaK,CAAO,EACtC,OAAIC,EAAM,OACCrB,GAAaP,EAAa,OAAQ4B,EAAM,IAAI,EAG5Cd,GAAqBc,EAAM,IAAI,CAE9C,CACA,SAASnB,GAAoBkB,EAAS,CAElC,OADc,IAAIL,GAAaK,CAAO,EACzB,WACjB,CACA,SAASD,GAASG,EAAGhC,EAAK,CAEtB,OADmBgC,EAAE,QAAUhC,EAAI,OAI5BgC,EAAE,UAAUA,EAAE,OAAShC,EAAI,MAAM,IAAMA,EAFnC,EAGf,CAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAuBA,MAAMiC,CAAQ,CACV,YAAY5B,EAAM6B,EAAW,CACzB,IAAIC,EAAO,EACPC,EAAW,GACX9G,EAAa+E,CAAI,GACjB,KAAK,MAAQA,EACb8B,EAAO9B,EAAK,KACZ+B,EAAW/B,EAAK,MAEXA,aAAgB,aACjB6B,EACA,KAAK,MAAQ,IAAI,WAAW7B,CAAI,GAGhC,KAAK,MAAQ,IAAI,WAAWA,EAAK,UAAU,EAC3C,KAAK,MAAM,IAAI,IAAI,WAAWA,CAAI,CAAC,GAEvC8B,EAAO,KAAK,MAAM,QAEb9B,aAAgB,aACjB6B,EACA,KAAK,MAAQ7B,GAGb,KAAK,MAAQ,IAAI,WAAWA,EAAK,MAAM,EACvC,KAAK,MAAM,IAAIA,CAAI,GAEvB8B,EAAO9B,EAAK,QAEhB,KAAK,MAAQ8B,EACb,KAAK,MAAQC,CAChB,CACD,MAAO,CACH,OAAO,KAAK,KACf,CACD,MAAO,CACH,OAAO,KAAK,KACf,CACD,MAAMC,EAAWC,EAAS,CACtB,GAAIhH,EAAa,KAAK,KAAK,EAAG,CAC1B,MAAMiH,EAAW,KAAK,MAChBC,EAAS1C,GAAUyC,EAAUF,EAAWC,CAAO,EACrD,OAAIE,IAAW,KACJ,KAEJ,IAAIP,EAAQO,CAAM,MAExB,CACD,MAAMC,EAAQ,IAAI,WAAW,KAAK,MAAM,OAAQJ,EAAWC,EAAUD,CAAS,EAC9E,OAAO,IAAIJ,EAAQQ,EAAO,EAAI,EAErC,CACD,OAAO,WAAWlI,EAAM,CACpB,GAAIgB,EAAmB,EAAI,CACvB,MAAMmH,EAASnI,EAAK,IAAKoI,GACjBA,aAAeV,EACRU,EAAI,MAGJA,CAEd,EACD,OAAO,IAAIV,EAAQtC,GAAU,MAAM,KAAM+C,CAAM,CAAC,MAE/C,CACD,MAAME,EAAcrI,EAAK,IAAKoI,GACtBtH,EAASsH,CAAG,EACLpC,GAAeJ,EAAa,IAAKwC,CAAG,EAAE,KAItCA,EAAI,KAElB,EACD,IAAIE,EAAc,EAClBD,EAAY,QAASpB,GAAU,CAC3BqB,GAAerB,EAAM,UACrC,CAAa,EACD,MAAMsB,EAAS,IAAI,WAAWD,CAAW,EACzC,IAAIE,EAAQ,EACZ,OAAAH,EAAY,QAASpB,GAAU,CAC3B,QAASpI,EAAI,EAAGA,EAAIoI,EAAM,OAAQpI,IAC9B0J,EAAOC,GAAO,EAAIvB,EAAMpI,CAAC,CAE7C,CAAa,EACM,IAAI6I,EAAQa,EAAQ,EAAI,EAEtC,CACD,YAAa,CACT,OAAO,KAAK,KACf,CACL,CAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAoBA,SAASE,GAAiBhB,EAAG,CACzB,IAAIiB,EACJ,GAAI,CACAA,EAAM,KAAK,MAAMjB,CAAC,CACrB,MACD,CACI,OAAO,IACV,CACD,OAAI5G,GAAiB6H,CAAG,EACbA,EAGA,IAEf,CAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAsBA,SAASC,GAAO3M,EAAM,CAClB,GAAIA,EAAK,SAAW,EAChB,OAAO,KAEX,MAAMwM,EAAQxM,EAAK,YAAY,GAAG,EAClC,OAAIwM,IAAU,GACH,GAEKxM,EAAK,MAAM,EAAGwM,CAAK,CAEvC,CACA,SAASI,GAAM5M,EAAM6M,EAAW,CAC5B,MAAMC,EAAqBD,EACtB,MAAM,GAAG,EACT,OAAOE,GAAaA,EAAU,OAAS,CAAC,EACxC,KAAK,GAAG,EACb,OAAI/M,EAAK,SAAW,EACT8M,EAGA9M,EAAO,IAAM8M,CAE5B,CAOA,SAASE,GAAchN,EAAM,CACzB,MAAMwM,EAAQxM,EAAK,YAAY,IAAKA,EAAK,OAAS,CAAC,EACnD,OAAIwM,IAAU,GACHxM,EAGAA,EAAK,MAAMwM,EAAQ,CAAC,CAEnC,CAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAgBA,SAASS,GAASC,EAAU5H,EAAO,CAC/B,OAAOA,CACX,CACA,MAAM6H,CAAQ,CACV,YAAYC,EAAQC,EAAOC,EAAUC,EAAO,CACxC,KAAK,OAASH,EACd,KAAK,MAAQC,GAASD,EACtB,KAAK,SAAW,CAAC,CAACE,EAClB,KAAK,MAAQC,GAASN,EACzB,CACL,CACA,IAAIO,EAAY,KAChB,SAASC,GAAUC,EAAU,CACzB,MAAI,CAAC5I,EAAS4I,CAAQ,GAAKA,EAAS,OAAS,EAClCA,EAGAV,GAAcU,CAAQ,CAErC,CACA,SAASC,IAAc,CACnB,GAAIH,EACA,OAAOA,EAEX,MAAMI,EAAW,CAAA,EACjBA,EAAS,KAAK,IAAIT,EAAQ,QAAQ,CAAC,EACnCS,EAAS,KAAK,IAAIT,EAAQ,YAAY,CAAC,EACvCS,EAAS,KAAK,IAAIT,EAAQ,gBAAgB,CAAC,EAC3CS,EAAS,KAAK,IAAIT,EAAQ,OAAQ,WAAY,EAAI,CAAC,EACnD,SAASU,EAAkBC,EAAWJ,EAAU,CAC5C,OAAOD,GAAUC,CAAQ,CAC5B,CACD,MAAMK,EAAc,IAAIZ,EAAQ,MAAM,EACtCY,EAAY,MAAQF,EACpBD,EAAS,KAAKG,CAAW,EAIzB,SAASC,EAAUF,EAAWlC,EAAM,CAChC,OAAIA,IAAS,OACF,OAAOA,CAAI,EAGXA,CAEd,CACD,MAAMqC,EAAc,IAAId,EAAQ,MAAM,EACtC,OAAAc,EAAY,MAAQD,EACpBJ,EAAS,KAAKK,CAAW,EACzBL,EAAS,KAAK,IAAIT,EAAQ,aAAa,CAAC,EACxCS,EAAS,KAAK,IAAIT,EAAQ,SAAS,CAAC,EACpCS,EAAS,KAAK,IAAIT,EAAQ,UAAW,KAAM,EAAI,CAAC,EAChDS,EAAS,KAAK,IAAIT,EAAQ,eAAgB,KAAM,EAAI,CAAC,EACrDS,EAAS,KAAK,IAAIT,EAAQ,qBAAsB,KAAM,EAAI,CAAC,EAC3DS,EAAS,KAAK,IAAIT,EAAQ,kBAAmB,KAAM,EAAI,CAAC,EACxDS,EAAS,KAAK,IAAIT,EAAQ,kBAAmB,KAAM,EAAI,CAAC,EACxDS,EAAS,KAAK,IAAIT,EAAQ,cAAe,KAAM,EAAI,CAAC,EACpDS,EAAS,KAAK,IAAIT,EAAQ,WAAY,iBAAkB,EAAI,CAAC,EAC7DK,EAAYI,EACLJ,CACX,CACA,SAASU,GAAOhB,EAAUiB,EAAS,CAC/B,SAASC,GAAc,CACnB,MAAMlO,EAASgN,EAAS,OAClBlN,EAAOkN,EAAS,SAChBnL,EAAM,IAAIR,EAASrB,EAAQF,CAAI,EACrC,OAAOmO,EAAQ,sBAAsBpM,CAAG,CAC3C,CACD,OAAO,eAAemL,EAAU,MAAO,CAAE,IAAKkB,CAAW,CAAE,CAC/D,CACA,SAASC,GAAaF,EAASG,EAAUV,EAAU,CAC/C,MAAMV,EAAW,CAAA,EACjBA,EAAS,KAAU,OACnB,MAAMqB,EAAMX,EAAS,OACrB,QAAS/K,EAAI,EAAGA,EAAI0L,EAAK1L,IAAK,CAC1B,MAAM2L,EAAUZ,EAAS/K,CAAC,EAC1BqK,EAASsB,EAAQ,KAAK,EAAIA,EAAQ,MAAMtB,EAAUoB,EAASE,EAAQ,MAAM,CAAC,EAE9E,OAAAN,GAAOhB,EAAUiB,CAAO,EACjBjB,CACX,CACA,SAASuB,GAAmBN,EAASO,EAAgBd,EAAU,CAC3D,MAAMlB,EAAMD,GAAiBiC,CAAc,EAC3C,OAAIhC,IAAQ,KACD,KAGJ2B,GAAaF,EADHzB,EACsBkB,CAAQ,CACnD,CACA,SAASe,GAA8BzB,EAAUwB,EAAgBhN,EAAM+D,EAAU,CAC7E,MAAMiH,EAAMD,GAAiBiC,CAAc,EAI3C,GAHIhC,IAAQ,MAGR,CAAC5H,EAAS4H,EAAI,cAAiB,EAG/B,OAAO,KAEX,MAAMkC,EAASlC,EAAI,eACnB,GAAIkC,EAAO,SAAW,EAClB,OAAO,KAEX,MAAMpN,EAAS,mBAaf,OAZmBoN,EAAO,MAAM,GAAG,EACX,IAAKC,GAAU,CACnC,MAAM3O,EAASgN,EAAS,OAClBlN,EAAOkN,EAAS,SAChB1H,EAAU,MAAQhE,EAAOtB,CAAM,EAAI,MAAQsB,EAAOxB,CAAI,EACtD8O,EAAOvJ,EAAQC,EAAS9D,EAAM+D,CAAQ,EACtCsJ,EAAcpJ,GAAgB,CAChC,IAAK,QACL,MAAAkJ,CACZ,CAAS,EACD,OAAOC,EAAOC,CACtB,CAAK,EACW,CAAC,CACjB,CACA,SAASC,GAAiB9B,EAAUU,EAAU,CAC1C,MAAMU,EAAW,CAAA,EACXC,EAAMX,EAAS,OACrB,QAAS/K,EAAI,EAAGA,EAAI0L,EAAK1L,IAAK,CAC1B,MAAM2L,EAAUZ,EAAS/K,CAAC,EACtB2L,EAAQ,WACRF,EAASE,EAAQ,MAAM,EAAItB,EAASsB,EAAQ,KAAK,GAGzD,OAAO,KAAK,UAAUF,CAAQ,CAClC,CAwDA,MAAMW,EAAY,CACd,YAAYxO,EAAKyO,EAQjBC,EAAS3L,EAAS,CACd,KAAK,IAAM/C,EACX,KAAK,OAASyO,EACd,KAAK,QAAUC,EACf,KAAK,QAAU3L,EACf,KAAK,UAAY,GACjB,KAAK,QAAU,GACf,KAAK,KAAO,KACZ,KAAK,aAAe,KAKpB,KAAK,iBAAmB,KACxB,KAAK,aAAe,CAAC,GAAG,EACxB,KAAK,qBAAuB,EAC/B,CACL,CAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAmBA,SAAS4L,GAAaC,EAAM,CACxB,GAAI,CAACA,EACD,MAAMvP,EAAO,CAErB,CACA,SAASwP,GAAgBnB,EAASP,EAAU,CACxC,SAASuB,EAAQI,EAAKC,EAAM,CACxB,MAAMtC,EAAWuB,GAAmBN,EAASqB,EAAM5B,CAAQ,EAC3D,OAAAwB,GAAalC,IAAa,IAAI,EACvBA,CACV,CACD,OAAOiC,CACX,CASA,SAASM,GAAmBtB,EAASP,EAAU,CAC3C,SAASuB,EAAQI,EAAKC,EAAM,CACxB,MAAMtC,EAAWuB,GAAmBN,EAASqB,EAAM5B,CAAQ,EAC3D,OAAAwB,GAAalC,IAAa,IAAI,EACvByB,GAA8BzB,EAAUsC,EAAMrB,EAAQ,KAAMA,EAAQ,SAAS,CACvF,CACD,OAAOgB,CACX,CACA,SAASO,GAAmB9N,EAAU,CAClC,SAAS+N,EAAaJ,EAAKnH,EAAK,CAC5B,IAAIwH,EACJ,OAAIL,EAAI,UAAW,IAAK,IAIpBA,EAAI,aAAY,EAAG,SAAS,qCAAqC,EAC7DK,EAASxP,GAAe,EAGxBwP,EAASzP,GAAe,EAIxBoP,EAAI,UAAW,IAAK,IACpBK,EAAS3P,GAAc2B,EAAS,MAAM,EAGlC2N,EAAI,UAAW,IAAK,IACpBK,EAASvP,GAAauB,EAAS,IAAI,EAGnCgO,EAASxH,EAIrBwH,EAAO,OAASL,EAAI,YACpBK,EAAO,eAAiBxH,EAAI,eACrBwH,CACV,CACD,OAAOD,CACX,CACA,SAASE,GAAmBjO,EAAU,CAClC,MAAMkO,EAASJ,GAAmB9N,CAAQ,EAC1C,SAAS+N,EAAaJ,EAAKnH,EAAK,CAC5B,IAAIwH,EAASE,EAAOP,EAAKnH,CAAG,EAC5B,OAAImH,EAAI,UAAW,IAAK,MACpBK,EAAS7P,GAAe6B,EAAS,IAAI,GAEzCgO,EAAO,eAAiBxH,EAAI,eACrBwH,CACV,CACD,OAAOD,CACX,CAiDA,SAASI,GAAe5B,EAASvM,EAAUgM,EAAU,CACjD,MAAMpI,EAAU5D,EAAS,gBACnBnB,EAAM8E,EAAQC,EAAS2I,EAAQ,KAAMA,EAAQ,SAAS,EACtDe,EAAS,MACT1L,EAAU2K,EAAQ,sBAClBlF,EAAc,IAAIgG,GAAYxO,EAAKyO,EAAQO,GAAmBtB,EAASP,CAAQ,EAAGpK,CAAO,EAC/F,OAAAyF,EAAY,aAAe4G,GAAmBjO,CAAQ,EAC/CqH,CACX,CAyBA,SAAS+G,GAAsB9C,EAAU1D,EAAM,CAC3C,OAAS0D,GAAYA,EAAS,aACzB1D,GAAQA,EAAK,QACd,0BACR,CACA,SAASyG,GAAmBrO,EAAU4H,EAAM0D,EAAU,CAClD,MAAMgD,EAAgB,OAAO,OAAO,CAAE,EAAEhD,CAAQ,EAChD,OAAAgD,EAAc,SAActO,EAAS,KACrCsO,EAAc,KAAU1G,EAAK,KAAI,EAC5B0G,EAAc,cACfA,EAAc,YAAiBF,GAAsB,KAAMxG,CAAI,GAE5D0G,CACX,CAIA,SAASC,GAAgBhC,EAASvM,EAAUgM,EAAUpE,EAAM0D,EAAU,CAClE,MAAM1H,EAAU5D,EAAS,sBACnB4G,EAAU,CACZ,yBAA0B,WAClC,EACI,SAAS4H,GAAc,CACnB,IAAIC,EAAM,GACV,QAASxN,EAAI,EAAGA,EAAI,EAAGA,IACnBwN,EAAMA,EAAM,KAAK,OAAM,EAAG,WAAW,MAAM,CAAC,EAEhD,OAAOA,CACV,CACD,MAAMC,EAAWF,IACjB5H,EAAQ,cAAc,EAAI,+BAAiC8H,EAC3D,MAAMC,EAAYN,GAAmBrO,EAAU4H,EAAM0D,CAAQ,EACvDsD,EAAiBxB,GAAiBuB,EAAW3C,CAAQ,EACrD6C,EAAc,KAChBH,EACA;AAAA;AAAA;AAAA,EAEAE,EACA;AAAA,IACAF,EACA;AAAA,gBAEAC,EAAU,YACV;AAAA;AAAA,EACEG,EAAe;AAAA,IAAWJ,EAAW,KACrCK,EAAOjF,EAAQ,QAAQ+E,EAAajH,EAAMkH,CAAY,EAC5D,GAAIC,IAAS,KACT,MAAM/P,GAAe,EAEzB,MAAMgQ,EAAY,CAAE,KAAML,EAAU,QAAW,EACzC9P,EAAM8E,EAAQC,EAAS2I,EAAQ,KAAMA,EAAQ,SAAS,EACtDe,EAAS,OACT1L,EAAU2K,EAAQ,mBAClBlF,EAAc,IAAIgG,GAAYxO,EAAKyO,EAAQI,GAAgBnB,EAASP,CAAQ,EAAGpK,CAAO,EAC5F,OAAAyF,EAAY,UAAY2H,EACxB3H,EAAY,QAAUT,EACtBS,EAAY,KAAO0H,EAAK,aACxB1H,EAAY,aAAeyG,GAAmB9N,CAAQ,EAC/CqH,CACX,CAwUA,MAAM4H,EAAc,CAChB,aAAc,CACV,KAAK,MAAQ,GACb,KAAK,KAAO,IAAI,eAChB,KAAK,QAAO,EACZ,KAAK,WAAa7K,EAAU,SAC5B,KAAK,aAAe,IAAI,QAAQmB,GAAW,CACvC,KAAK,KAAK,iBAAiB,QAAS,IAAM,CACtC,KAAK,WAAanB,EAAU,MAC5BmB,GAChB,CAAa,EACD,KAAK,KAAK,iBAAiB,QAAS,IAAM,CACtC,KAAK,WAAanB,EAAU,cAC5BmB,GAChB,CAAa,EACD,KAAK,KAAK,iBAAiB,OAAQ,IAAM,CACrCA,GAChB,CAAa,CACb,CAAS,CACJ,CACD,KAAK1G,EAAKyO,EAAQyB,EAAMnI,EAAS,CAC7B,GAAI,KAAK,MACL,MAAMlH,EAAc,+BAA+B,EAIvD,GAFA,KAAK,MAAQ,GACb,KAAK,KAAK,KAAK4N,EAAQzO,EAAK,EAAI,EAC5B+H,IAAY,OACZ,UAAW1C,KAAO0C,EACVA,EAAQ,eAAe1C,CAAG,GAC1B,KAAK,KAAK,iBAAiBA,EAAK0C,EAAQ1C,CAAG,EAAE,SAAQ,CAAE,EAInE,OAAI6K,IAAS,OACT,KAAK,KAAK,KAAKA,CAAI,EAGnB,KAAK,KAAK,OAEP,KAAK,YACf,CACD,cAAe,CACX,GAAI,CAAC,KAAK,MACN,MAAMrP,EAAc,uCAAuC,EAE/D,OAAO,KAAK,UACf,CACD,WAAY,CACR,GAAI,CAAC,KAAK,MACN,MAAMA,EAAc,oCAAoC,EAE5D,GAAI,CACA,OAAO,KAAK,KAAK,MACpB,MACD,CACI,MAAO,EACV,CACJ,CACD,aAAc,CACV,GAAI,CAAC,KAAK,MACN,MAAMA,EAAc,sCAAsC,EAE9D,OAAO,KAAK,KAAK,QACpB,CACD,cAAe,CACX,GAAI,CAAC,KAAK,MACN,MAAMA,EAAc,uCAAuC,EAE/D,OAAO,KAAK,KAAK,UACpB,CAED,OAAQ,CACJ,KAAK,KAAK,OACb,CACD,kBAAkBwP,EAAQ,CACtB,OAAO,KAAK,KAAK,kBAAkBA,CAAM,CAC5C,CACD,0BAA0BC,EAAU,CAC5B,KAAK,KAAK,QAAU,MACpB,KAAK,KAAK,OAAO,iBAAiB,WAAYA,CAAQ,CAE7D,CACD,6BAA6BA,EAAU,CAC/B,KAAK,KAAK,QAAU,MACpB,KAAK,KAAK,OAAO,oBAAoB,WAAYA,CAAQ,CAEhE,CACL,CACA,MAAMC,WAA0BH,EAAc,CAC1C,SAAU,CACN,KAAK,KAAK,aAAe,MAC5B,CACL,CACA,SAASI,IAAoB,CACzB,OAAqD,IAAID,EAC7D,CA2gBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GA4BA,MAAME,CAAU,CACZ,YAAYC,EAAUvP,EAAU,CAC5B,KAAK,SAAWuP,EACZvP,aAAoBL,EACpB,KAAK,UAAYK,EAGjB,KAAK,UAAYL,EAAS,YAAYK,EAAUuP,EAAS,IAAI,CAEpE,CAMD,UAAW,CACP,MAAO,QAAU,KAAK,UAAU,OAAS,IAAM,KAAK,UAAU,IACjE,CACD,QAAQhD,EAASvM,EAAU,CACvB,OAAO,IAAIsP,EAAU/C,EAASvM,CAAQ,CACzC,CAID,IAAI,MAAO,CACP,MAAMA,EAAW,IAAIL,EAAS,KAAK,UAAU,OAAQ,EAAE,EACvD,OAAO,KAAK,QAAQ,KAAK,SAAUK,CAAQ,CAC9C,CAID,IAAI,QAAS,CACT,OAAO,KAAK,UAAU,MACzB,CAID,IAAI,UAAW,CACX,OAAO,KAAK,UAAU,IACzB,CAKD,IAAI,MAAO,CACP,OAAOoL,GAAc,KAAK,UAAU,IAAI,CAC3C,CAID,IAAI,SAAU,CACV,OAAO,KAAK,QACf,CAKD,IAAI,QAAS,CACT,MAAMoE,EAAUzE,GAAO,KAAK,UAAU,IAAI,EAC1C,GAAIyE,IAAY,KACZ,OAAO,KAEX,MAAMxP,EAAW,IAAIL,EAAS,KAAK,UAAU,OAAQ6P,CAAO,EAC5D,OAAO,IAAIF,EAAU,KAAK,SAAUtP,CAAQ,CAC/C,CAID,aAAaT,EAAM,CACf,GAAI,KAAK,UAAU,OAAS,GACxB,MAAMD,GAAqBC,CAAI,CAEtC,CACL,CAsCA,SAASkQ,GAAcC,EAAKxH,EAAMoD,EAAU,CACxCoE,EAAI,aAAa,aAAa,EAC9B,MAAMrI,EAAckH,GAAgBmB,EAAI,QAASA,EAAI,UAAW3D,GAAa,EAAE,IAAIjC,EAAQ5B,EAAM,EAAI,EAAGoD,CAAQ,EAChH,OAAOoE,EAAI,QACN,sBAAsBrI,EAAagI,EAAiB,EACpD,KAAKM,IACC,CACH,SAAUA,EACV,IAAAD,CACZ,EACK,CACL,CAwBA,SAASE,GAAeF,EAAKhM,EAAOjE,EAASuI,EAAa,IAAKsD,EAAU,CACrEoE,EAAI,aAAa,cAAc,EAC/B,MAAMxH,EAAOE,GAAe3I,EAAQiE,CAAK,EACnC4K,EAAgB,OAAO,OAAO,CAAE,EAAEhD,CAAQ,EAChD,OAAIgD,EAAc,aAAkB,MAAQpG,EAAK,aAAe,OAC5DoG,EAAc,YAAiBpG,EAAK,aAEjCuH,GAAcC,EAAKxH,EAAK,KAAMoG,CAAa,CACtD,CAkHA,SAASuB,GAAiBH,EAAK,CAC3BA,EAAI,aAAa,gBAAgB,EACjC,MAAMrI,EAAc8G,GAAeuB,EAAI,QAASA,EAAI,UAAW3D,GAAW,CAAE,EAC5E,OAAO2D,EAAI,QACN,sBAAsBrI,EAAagI,EAAiB,EACpD,KAAKxQ,GAAO,CACb,GAAIA,IAAQ,KACR,MAAMI,GAAa,EAEvB,OAAOJ,CACf,CAAK,CACL,CAsBA,SAASiR,GAAYJ,EAAKzE,EAAW,CACjC,MAAMuE,EAAUxE,GAAM0E,EAAI,UAAU,KAAMzE,CAAS,EAC7CjL,EAAW,IAAIL,EAAS+P,EAAI,UAAU,OAAQF,CAAO,EAC3D,OAAO,IAAIF,EAAUI,EAAI,QAAS1P,CAAQ,CAC9C,CAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAgBA,SAAS+P,GAAM3R,EAAM,CACjB,MAAO,kBAAkB,KAAKA,CAAI,CACtC,CAIA,SAAS4R,GAAWzD,EAAS1N,EAAK,CAC9B,OAAO,IAAIyQ,EAAU/C,EAAS1N,CAAG,CACrC,CAKA,SAASoR,GAAYP,EAAKtR,EAAM,CAC5B,GAAIsR,aAAeQ,EAAqB,CACpC,MAAM3D,EAAUmD,EAChB,GAAInD,EAAQ,SAAW,KACnB,MAAMxN,GAAe,EAEzB,MAAMoR,EAAY,IAAIb,EAAU/C,EAASA,EAAQ,OAAO,EACxD,OAAInO,GAAQ,KACD6R,GAAYE,EAAW/R,CAAI,EAG3B+R,MAKX,QAAI/R,IAAS,OACF0R,GAAYJ,EAAKtR,CAAI,EAGrBsR,CAGnB,CACA,SAASU,GAAMC,EAAcC,EAAW,CACpC,GAAIA,GAAaP,GAAMO,CAAS,EAAG,CAC/B,GAAID,aAAwBH,EACxB,OAAOF,GAAWK,EAAcC,CAAS,EAGzC,MAAMlR,EAAgB,0EAA0E,MAIpG,QAAO6Q,GAAYI,EAAcC,CAAS,CAElD,CACA,SAASC,EAAczQ,EAAM0Q,EAAQ,CACjC,MAAM3Q,EAAe2Q,GAAW,KAA4B,OAASA,EAAOlT,EAAyB,EACrG,OAAIuC,GAAgB,KACT,KAEJF,EAAS,mBAAmBE,EAAcC,CAAI,CACzD,CACA,SAAS2Q,GAAyBC,EAAS5Q,EAAM6Q,EAAMC,EAAU,CAAA,EAAI,CACjEF,EAAQ,KAAO,GAAG5Q,KAAQ6Q,IAC1BD,EAAQ,UAAY,OACpB,KAAM,CAAE,cAAAG,CAAe,EAAGD,EACtBC,IACAH,EAAQ,mBACJ,OAAOG,GAAkB,SACnBA,EACAC,GAAoBD,EAAeH,EAAQ,IAAI,QAAQ,SAAS,EAElF,CAOA,MAAMR,CAAoB,CACtB,YAIAa,EAAKC,EAILC,EAIAC,EAAMC,EAAkB,CACpB,KAAK,IAAMJ,EACX,KAAK,cAAgBC,EACrB,KAAK,kBAAoBC,EACzB,KAAK,KAAOC,EACZ,KAAK,iBAAmBC,EACxB,KAAK,QAAU,KAMf,KAAK,MAAQ9T,EACb,KAAK,UAAY,QACjB,KAAK,OAAS,KACd,KAAK,SAAW,GAChB,KAAK,uBAAyBE,GAC9B,KAAK,oBAAsBC,GAC3B,KAAK,UAAY,IAAI,IACjB0T,GAAQ,KACR,KAAK,QAAUvR,EAAS,mBAAmBuR,EAAM,KAAK,KAAK,EAG3D,KAAK,QAAUX,EAAc,KAAK,MAAO,KAAK,IAAI,OAAO,CAEhE,CAKD,IAAI,MAAO,CACP,OAAO,KAAK,KACf,CACD,IAAI,KAAKzQ,EAAM,CACX,KAAK,MAAQA,EACT,KAAK,MAAQ,KACb,KAAK,QAAUH,EAAS,mBAAmB,KAAK,KAAMG,CAAI,EAG1D,KAAK,QAAUyQ,EAAczQ,EAAM,KAAK,IAAI,OAAO,CAE1D,CAID,IAAI,oBAAqB,CACrB,OAAO,KAAK,mBACf,CACD,IAAI,mBAAmBsR,EAAM,CACzB9N,EAAe,OACA,EACC,OAAO,kBAAmB8N,CAAI,EAC9C,KAAK,oBAAsBA,CAC9B,CAKD,IAAI,uBAAwB,CACxB,OAAO,KAAK,sBACf,CACD,IAAI,sBAAsBA,EAAM,CAC5B9N,EAAe,OACA,EACC,OAAO,kBAAmB8N,CAAI,EAC9C,KAAK,uBAAyBA,CACjC,CACD,MAAM,eAAgB,CAClB,GAAI,KAAK,mBACL,OAAO,KAAK,mBAEhB,MAAMC,EAAO,KAAK,cAAc,aAAa,CAAE,SAAU,EAAI,CAAE,EAC/D,GAAIA,EAAM,CACN,MAAMC,EAAY,MAAMD,EAAK,WAC7B,GAAIC,IAAc,KACd,OAAOA,EAAU,YAGzB,OAAO,IACV,CACD,MAAM,mBAAoB,CACtB,MAAMC,EAAW,KAAK,kBAAkB,aAAa,CAAE,SAAU,EAAI,CAAE,EACvE,OAAIA,GACe,MAAMA,EAAS,YAKhB,MAEX,IACV,CAID,SAAU,CACN,OAAK,KAAK,WACN,KAAK,SAAW,GAChB,KAAK,UAAU,QAAQC,GAAWA,EAAQ,OAAM,CAAE,EAClD,KAAK,UAAU,SAEZ,QAAQ,SAClB,CAKD,sBAAsBrR,EAAK,CACvB,OAAO,IAAImP,EAAU,KAAMnP,CAAG,CACjC,CAKD,aAAakH,EAAaC,EAAgBT,EAAWM,EAAe7B,EAAQ,GAAM,CAC9E,GAAK,KAAK,SAQN,OAAO,IAAIhE,GAAYjC,GAAU,CAAE,EARnB,CAChB,MAAMmS,EAAUpK,GAAYC,EAAa,KAAK,OAAQR,EAAWM,EAAeG,EAAgB,KAAK,iBAAkBhC,CAAK,EAC5H,YAAK,UAAU,IAAIkM,CAAO,EAE1BA,EAAQ,WAAY,EAAC,KAAK,IAAM,KAAK,UAAU,OAAOA,CAAO,EAAG,IAAM,KAAK,UAAU,OAAOA,CAAO,CAAC,EAC7FA,EAKd,CACD,MAAM,sBAAsBnK,EAAaC,EAAgB,CACrD,KAAM,CAACT,EAAWM,CAAa,EAAI,MAAM,QAAQ,IAAI,CACjD,KAAK,cAAe,EACpB,KAAK,kBAAmB,CACpC,CAAS,EACD,OAAO,KAAK,aAAaE,EAAaC,EAAgBT,EAAWM,CAAa,EAAE,YACnF,CACL,CAEA,MAAM5H,EAAO,oBACPiB,EAAU,SAEhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAmBA,MAAMiR,GAAe,UA2DrB,SAASC,GAAahC,EAAKhM,EAAOjE,EAAQ6L,EAAU,CAChD,OAAAoE,EAAMiC,EAAmBjC,CAAG,EACrBE,GAAeF,EAAKhM,EAAOjE,EAAQ6L,CAAQ,CACtD,CA8FA,SAASsG,GAAelC,EAAK,CACzB,OAAAA,EAAMiC,EAAmBjC,CAAG,EACrBG,GAAiBH,CAAG,CAC/B,CAWA,SAASA,EAAIW,EAAcC,EAAW,CAClC,OAAAD,EAAesB,EAAmBtB,CAAY,EACvCD,GAAMC,EAAcC,CAAS,CACxC,CAeA,SAASuB,EAAWd,EAAMe,GAAQ,EAAEC,EAAW,CAC3ChB,EAAMY,EAAmBZ,CAAG,EAE5B,MAAMiB,EADkBC,GAAalB,EAAKU,EAAY,EACd,aAAa,CACjD,WAAYM,CACpB,CAAK,EACKG,EAAWC,GAAkC,SAAS,EAC5D,OAAID,GACAE,GAAuBJ,EAAiB,GAAGE,CAAQ,EAEhDF,CACX,CAWA,SAASI,GAAuB1B,EAAS5Q,EAAM6Q,EAAMC,EAAU,CAAA,EAAI,CAC/DH,GAAyBC,EAAS5Q,EAAM6Q,EAAMC,CAAO,CACzD,CA2DA,SAASyB,GAAQC,EAAW,CAAE,mBAAoBzT,CAAG,EAAI,CACrD,MAAMkS,EAAMuB,EAAU,YAAY,KAAK,EAAE,aAAY,EAC/CC,EAAeD,EAAU,YAAY,eAAe,EACpDE,EAAmBF,EAAU,YAAY,oBAAoB,EACnE,OAAO,IAAIpC,EAAoBa,EAAKwB,EAAcC,EAAkB3T,EAAK4T,EAAW,CACxF,CACA,SAASC,IAAkB,CACvBC,GAAmB,IAAIC,GAAUnB,GAAcY,GAAS,UAAqC,qBAAqB,EAAI,CAAC,EAEvHQ,EAAgBtT,EAAMiB,EAAS,EAAE,EAEjCqS,EAAgBtT,EAAMiB,EAAS,SAAS,CAC5C,CACAkS,GAAiB,ECtkHV,MAAMI,GAAa,CACtB,mBAAoB,CAACvT,EAAc2I,IACxB,IAAI,QAAa,CAAC3C,EAASC,IAAW,CAEzC,MAAMuN,EAAmBC,EAAKtC,EAAQ,EAAG,kBAAkBnR,OAAU,EAErEmS,GAAaqB,EAAkB7K,EAAM,UAAU,EAAE,KAAK,SAAY,CAC9D,MAAMrJ,EAAW,MAAM+S,GACnBoB,EAAKtC,EAAA,EAAW,kBAAkBnR,OAAU,CAAA,EAEhDgG,EAAQ1G,CAAG,CACd,CAAA,EAAE,MAAM,IAAM2G,EAAO,EAAK,CAAC,CAAA,CAC/B,CAET","x_google_ignoreList":[0]}